group = 'beam'
version = '0.8.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
    }
}

apply plugin: 'org.hidetake.ssh'

List<String> requiredProps = ["lawrenciumUser", "lawrenciumPassword", "otp"]

for (prop in requiredProps) {
    if (!project.hasProperty(prop)) {
        println "Property '$prop' is required and should be set!"
    }
}

def propsFileName = "${project.rootDir}/gradle.deploy.properties"
if (project.hasProperty('propsFile')) {
    propsFileName = project.findProperty('propsFile')
}

def propsFile = new Properties()
propsFile.load(project.file(propsFileName).newDataInputStream())

ext.getParameterValue = { String paramName ->
    if (project.hasProperty(paramName)) {
        return project.findProperty(paramName)
    } else {
        return propsFile.getProperty(paramName)
    }
}

ext.getParameterOrEnvironmentValue = { String paramName ->
    if (project.hasProperty(paramName)) {
        return project.findProperty(paramName)
    } else if (System.getenv(paramName)) {
        return System.getenv(paramName)
    } else {
        return propsFile.getProperty(paramName)
    }
}

remotes {
    lawrenciumLoginNode {
        host = 'lrc-login.lbl.gov'
        user = project.findProperty('lawrenciumUser') ?: 'user-not-specified'
    }
}

ssh {
    settings {
        authentications = ["keyboard-interactive"]
        knownHosts = allowAnyHosts
    }
}

tasks.register("deployToLawrencium") {
    doLast {
        ssh.run {
            settings { password = getParameterValue("lawrenciumPassword") + getParameterValue("otp") }

            def runName = getParameterValue('runName')

            def branch = getParameterValue('beamBranch') ?: getCurrentGitBranch()
            def dataBranch = getParameterValue('dataBranch') ?: 'develop'

            def commit = getParameterValue('beamCommit') ?: 'HEAD'
            def dataCommit = getParameterValue('dataCommit') ?: 'HEAD'

            def configs = getParameterValue('beamConfigs') ?: ext.getParameterValue(getCurrentGitBranch() + '.configs')

            // partition, memory limit and QoS should be changed together
            def lawrenciumPartition = getParameterValue('lawrenciumPartition') ?: 'es1'
            def lawrenciumMemoryLimit = getParameterValue('lawrenciumMemoryLimit') ?: '480'
            def lawrenciumQoS = getParameterValue('lawrenciumQoS') ?: 'es_normal'

            // using memory limit for lawrencium cluster is usually fine
            def max_ram = getParameterValue('forcedMaxRAM') ?: lawrenciumMemoryLimit
            def profiler_type = getParameterValue('profiler_type') ?: 'cpumem'

            def sentNotification = getParameterValue('sentNotification') ?: true
            def slackHookWithToken = getParameterValue('slackHookWithToken') ?: 'not-set'
            def simulationsSpreadsheetUrl = getParameterValue('simulationsSpreadsheetUrl') ?: 'not-set'

            def google_api_key = getParameterOrEnvironmentValue('GOOGLE_API_KEY') ?: 'not-set'

            def s3_publish = getParameterValue('s3Backup') ?: true
            def region = getParameterValue('region') ?: defaultRegion
            def aws_access_key_id = getParameterOrEnvironmentValue('AWS_ACCESS_KEY_ID') ?: 'not-set'
            def aws_secret_access_key = getParameterOrEnvironmentValue('AWS_SECRET_ACCESS_KEY') ?: 'not-set'

            // by-default maximum possible value is used
            def expectedDuration = getParameterValue('expectedDuration') ?: '3-00:00:00'

            // in case the simulation should be run under different lawrencium account
            def lawrenciumAccount = getParameterValue('lawrenciumAccount') ?: 'pc_beamcore'

            // which docker image to run
            def dockerImageTag = getParameterValue('dockerImageTag') ?: 'latest'
            def dockerImageName = getParameterValue('dockerImageName') ?: 'beam-environment'
            def dockerImageNameSpace = getParameterValue('dockerImageNameSpace') ?: 'beammodel'

            def parametersToDeploy = "--RUN_NAME='$runName' " +
                    "--BEAM_BRANCH_NAME='$branch' " +
                    "--BEAM_COMMIT_SHA='$commit' " +
                    "--BEAM_DATA_BRANCH_NAME='$dataBranch' " +
                    "--BEAM_DATA_COMMIT_SHA='$dataCommit' " +
                    "--BEAM_CONFIG='$configs' " +
                    "--MAX_RAM='$max_ram' " +
                    "--PROFILER='$profiler_type' " +
                    "--ACCOUNT='$lawrenciumAccount' " +
                    "--PARTITION='$lawrenciumPartition' " +
                    "--QOS='$lawrenciumQoS' " +
                    "--MEMORY_LIMIT='$lawrenciumMemoryLimit' " +
                    "--EXPECTED_EXECUTION_DURATION='$expectedDuration' " +
                    "--S3_REGION='$region' " +
                    "--S3_PUBLISH='$s3_publish' " +
                    "--AWS_SECRET_ACCESS_KEY='$aws_secret_access_key' " +
                    "--AWS_ACCESS_KEY_ID='$aws_access_key_id' " +
                    "--SEND_NOTIFICATION='$sentNotification' " +
                    "--SLACK_HOOK_WITH_TOKEN='$slackHookWithToken' " +
                    "--SIMULATIONS_SPREADSHEET_UPDATE_URL='$simulationsSpreadsheetUrl' " +
                    "--GOOGLE_API_KEY='$google_api_key' " +
                    "--PULL_CODE='true' " +
                    "--PULL_DATA='true' " +
                    "--DOCKER_IMAGE_NAMESPACE='$dockerImageNameSpace' " +
                    "--DOCKER_IMAGE_NAME='$dockerImageName' " +
                    "--DOCKER_IMAGE_TAG='$dockerImageTag' "
            
            def base_path = "https://raw.githubusercontent.com/LBNL-UCB-STI/beam/inm/lawrencium-automatization/lawrencium/src/main/bash"

            session(remotes.lawrenciumLoginNode) {
                execute "rm -f slurm_job.sh"
                execute "rm -f slurm_job_runner.sh"
                // downloading files instead of sending them
                // because it is not allowed to push files to login node
                // file transfer node uses different type of authentication
                // and both nodes are not working together within one session for some reason
                execute "wget $base_path/slurm_job.sh"
                execute "wget $base_path/slurm_job_runner.sh"
                execute "chmod +x slurm_job_runner.sh slurm_job.sh"
                execute "./slurm_job_runner.sh " + parametersToDeploy
                println "squeue -u $lawrenciumUser"
                execute "squeue -u $lawrenciumUser"
            }
        }
    }
}


tasks.register("lawrenciumQueue") {
    doLast {
        ssh.run {
            settings { password = getParameterValue("lawrenciumPassword") + getParameterValue("otp") }

            def sacctFormat = "JobID,JobName%30,state,start,end,elapsed,nnodes,ncpus,nodelist,user,partition,maxrss,maxvmsize,time"

            if (!project.hasProperty("fromDate")) {
                Date today = new Date()
                Integer daysPast = (project.findProperty('forDays') ?: '1').toInteger()
                Date yesterday = today - daysPast
                ext.fromDate = yesterday.format("yyyy-MM-dd")
            }

            def commandToGetJobsListForUser = "sacct -u $lawrenciumUser --format=$sacctFormat -S $fromDate"
            def commandToGetQueueForUser = "squeue -u $lawrenciumUser"

            session(remotes.lawrenciumLoginNode) {
                println " "
                println commandToGetQueueForUser
                println commandToGetJobsListForUser
                println " "
                execute commandToGetQueueForUser
                execute commandToGetJobsListForUser
            }
        }
    }
}


tasks.register("lawrenciumNodes") {
    doLast {
        ssh.run {
            settings { password = getParameterValue("lawrenciumPassword") + getParameterValue("otp") }

            def lawrenciumPartition = getParameterValue('lawrenciumPartition') ?: 'es1'

            def commandToGetNodesInfo = "sinfo  -N --long --partition=$lawrenciumPartition"

            session(remotes.lawrenciumLoginNode) {
                println " "
                println commandToGetNodesInfo
                execute commandToGetNodesInfo
            }
        }
    }
}
