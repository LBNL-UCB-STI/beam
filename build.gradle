import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask

import java.time.ZoneOffset
import java.time.format.DateTimeFormatter
import java.time.Instant

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '1.0.3.Final'
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.35"
        classpath "com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE"
        classpath 'cz.alenkacz:gradle-scalafmt:1.7.0'
    }
}

plugins {
    id "net.ltgt.apt" version "0.5"
    id "de.undercouch.download" version "3.2.0"
    id "org.scoverage" version "2.1.0"
}

//ext {
//    env = "beamville"
//}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'kr.motd.sphinx'
apply plugin: 'application'
apply plugin: 'ManifestClasspath'
apply plugin: 'scalafmt'

group = 'beam'
version = '0.6.0'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileScala.options.encoding = 'UTF-8'
def scalaBinaryVersion = "2.12"
def akkaBinaryVersion = "2.4.16"
def circeBinaryVersion="0.7.1"
def slf4jVersion = "1.7.12"
def kamonVersion = "0.6.7"
def tscfgVersion = "0.9.4"

sourceSets.main.scala.srcDirs = ["src/main/scala", "src/main/java"]
sourceSets.main.java.srcDirs = []

sourceSets.test.java.srcDirs = []
sourceSets.test.scala.srcDirs = ["src/test/scala", "src/test/java"]

if (project.hasProperty('env')) {
    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "test/input/" + project.getProperty('env')
            }
        }
    }
}

allprojects {
    repositories {
        maven { url "http://maven.geotoolkit.org/" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases" }
        maven { url "http://central.maven.org/maven2" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://download.osgeo.org/webdav/geotools" }
        maven { url "http://dl.bintray.com/matsim/matsim" }
        maven { url "http://maven.conveyal.com/" }
        maven { url "http://repo1.maven.org/maven2" }
        maven { url "http://download.java.net/maven/2/" }
        maven { url "http://people.apache.org/repo/m1-ibiblio-rsync-repository/org.apache.axis2/" }
        maven { url "http://dl.bintray.com/andimarek/graphql-java" }
        maven { url "http://maven.geo-solutions.it" }
        maven { url "http://dl.bintray.com/scalaz/releases" }
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://nexus.onebusaway.org/content/groups/public/" }
        maven { url "https://jitpack.io" }
    }
}

dependencies {

    ////////////////////////////
    // Java dependencies
    ////////////////////////////

    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.1.0'
    compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.1.0'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'de.ruedigermoeller', name: 'fst', version: '2.47'
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.14'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.5'
    compile group: 'org.geotools', name: 'gt-main', version: '13.0'
    compile group: 'org.geotools', name: 'gt-referencing', version: '13.0'
    compile group: 'org.geotools', name: 'gt-shapefile', version: '13.0'
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    runtime group: 'org.geotools', name: 'gt-epsg-hsql', version: '13.0'
    compile group: 'aopalliance', name: 'aopalliance', version: '1.0'
    compile group: 'de.ruedigermoeller', name: 'fst', version: '2.48'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.4'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.12', version: '2.9.4'
    compile group: 'org.javassist', name: 'javassist', version: '3.19.0-GA'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'jdom', name: 'jdom', version: '1.1'
    compile group: 'org.jdom', name: 'jdom2', version: '2.0.5'

    compile group: 'org.objenesis', name: 'objenesis', version: '2.4'
    compile group: 'javax.media', name: 'jai_core', version: '1.1.3'
    compile group: 'org.geotools', name: 'gt-referencing', version: '15.2'
    compile group: 'org.geotools', name: 'gt-epsg-hsql', version: '15.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'com.esotericsoftware', name: 'kryo-shaded', version: '4.0.0'
    compile 'net.sf.supercsv:super-csv:2.4.0'
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.2'
    compile group: 'edu.ucar', name: 'udunits', version: '4.5.5'
    compile 'org.reflections:reflections:0.9.10'
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.2-b01'

    compile group: 'org.matsim.contrib', name: 'multimodal', version: '0.10.0'
    compile group: 'org.matsim.contrib', name: 'bicycle', version: '0.10.0'

    compile (group: 'org.matsim', name: 'matsim', version: '0.10.0-beam-1') {
        exclude group: 'log4j', module: 'log4j'
    }
    compile group: 'org.matsim.contrib', name: 'socnetsim', version: '0.10.0'

    compile "com.typesafe.scala-logging:scala-logging_${scalaBinaryVersion}:3.8.0"
    compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"

    compile(group: 'com.github.michaz', name: 'r5', version: 'master-SNAPSHOT', changing: true) {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    compile "com.sigopt:sigopt-java:4.9.0"



    testCompile group: 'junit', name: 'junit', version: '4.8'
    // https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.6'
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '2.+'
    testCompile group: "org.mockito", name: "mockito-core", version: "2.+"


    /////////////////////////////////
    // Scala dependencies
    /////////////////////////////////

    // CORE Scala //
    compile "org.scala-lang:scala-library:2.12.6"
    compile group: 'org.scala-lang.modules', name: "scala-xml_${scalaBinaryVersion}", version: '1.0.6'


    // NEEDED FOR USING REPL //
    compile "org.scala-lang:scala-compiler:2.12.6"

    // TEST Scala //
    testCompile group: 'org.scalatest', name: "scalatest_${scalaBinaryVersion}", version: '3.0.1'

    // 3rd Party Scala //
    //    compile 'org.scalaz:scalaz-core_2.12:7.3.0-M9'
    compile "net.codingwell:scala-guice_${scalaBinaryVersion}:4.1.0"  // DI
    compile ('com.github.carueda:tscfg:v'+ tscfgVersion){ // config
        exclude group: 'org.scala-lang.modules', module: 'scala-xml_2.11'
    }
    // https://mvnrepository.com/artifact/org.scalaz/scalaz-core_2.12
    compile group: 'org.scalaz', name: "scalaz-core_${scalaBinaryVersion}", version: '7.3.0-M10'
    //compile group: 'com.lihaoyi', name: 'pprint', version: '0.4.3'
    //compile group: 'com.github.lihaoyi.upickle-pprint', name:'pprint', version:'0.4.0', changing: false
    // https://mvnrepository.com/artifact/com.beachape/enumeratum_2.12
    compile group: 'com.beachape', name: "enumeratum_${scalaBinaryVersion}", version: "1.5.12"
// https://mvnrepository.com/artifact/com.beachape/enumeratum-circe_2.12
    compile group: 'com.beachape', name: "enumeratum-circe_${scalaBinaryVersion}", version: "1.5.14"
    // https://mvnrepository.com/artifact/io.circe/circe-core_2.12
    compile group: 'io.circe', name: "circe-core_${scalaBinaryVersion}", version: circeBinaryVersion
    // https://mvnrepository.com/artifact/io.circe/circe-generic_2.12
    compile group: 'io.circe', name: "circe-generic_${scalaBinaryVersion}", version: circeBinaryVersion
    // https://mvnrepository.com/artifact/io.circe/circe-parser_2.12
    compile group: 'io.circe', name: "circe-parser_${scalaBinaryVersion}", version: circeBinaryVersion
    compile group: 'com.github.stephenc.eaio-uuid', name: "uuid", version: "3.4.0"
    compile 'com.hubspot.jinjava:jinjava:2.0.5'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'

    compile group: 'com.typesafe.play', name: "play-json_${scalaBinaryVersion}", version: '2.6.3'

    ////////////////////////////////////
    ///Performance Monitoring (Kamon)///
    ////////////////////////////////////

    compile("io.kamon:kamon-core_${scalaBinaryVersion}:${kamonVersion}")
    compile("io.kamon:kamon-scala_${scalaBinaryVersion}:${kamonVersion}")
    compile("io.kamon:kamon-akka-2.4_${scalaBinaryVersion}:${kamonVersion}")
    compile("io.kamon:kamon-statsd_${scalaBinaryVersion}:${kamonVersion}")
    compile "io.kamon:kamon-influxdb_${scalaBinaryVersion}:0.6.9"
    compile("io.kamon:kamon-log-reporter_${scalaBinaryVersion}:${kamonVersion}")


    /////////////
    // Akka Dependencies
    ////////////

    // CORE Akka //
    compile group: 'com.typesafe.akka', name: "akka-actor_${scalaBinaryVersion}", version: akkaBinaryVersion
    compile group: 'com.typesafe.akka', name: "akka-slf4j_${scalaBinaryVersion}", version: akkaBinaryVersion
//    compile group: 'com.typesafe.akka', name: "akka-persistence_${scalaBinaryVersion}", version: akkaBinaryVersion
//    compile group: 'com.typesafe.akka', name: "akka-remote_${scalaBinaryVersion}", version: akkaBinaryVersion
//    compile group: 'com.typesafe.akka', name: "akka-cluster_${scalaBinaryVersion}", version: akkaBinaryVersion
    compile group: 'com.typesafe.akka', name: "akka-contrib_${scalaBinaryVersion}", version: akkaBinaryVersion
//    compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.9'

    // TEST Akka //
    testCompile group: 'com.typesafe.akka', name: "akka-testkit_${scalaBinaryVersion}", version: akkaBinaryVersion

    // 3rd Party Akka //
    //compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.7'
//    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'
    //compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.5.0'
    compile "tv.cntt:glokka_${scalaBinaryVersion}:2.4.0"  // Actor registry

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.0'

    scoverage "org.scoverage:scalac-scoverage-plugin_${scalaBinaryVersion}:1.3.1", "org.scoverage:scalac-scoverage-runtime_${scalaBinaryVersion}:1.3.1"
}

// Autoformatting using scalafmt

scalafmt {
    // configFilePath = ".scalafmt.conf" // .scalafmt.conf in the project root is default value, provide only if other location is needed
}

compileScala.dependsOn(scalafmtAll)

// Task to run scala tests, as Scala tests not picked up by Gradle by default.
task spec(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o', '-l', 'beam.tags.ExcludeRegular']
    classpath = sourceSets.test.runtimeClasspath
}
test.dependsOn spec

/* //////////////////////////////////////////////////
*  Task to run tagged tests.
*  Note: use space separated list of tags
* ./gradlew taggedTest -Ptags="beam.tags.Performance beam.tags.Integration"
* /////////////////////////////////////////////////// */

task taggedTest(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'

    args = ['-R', 'build/classes/scala/test', '-o', '-n'] << (project.findProperty('tags') ?: 'org.scalatest.Ignore')
    classpath = sourceSets.test.runtimeClasspath
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Task to run tests periodically on continue integration server.
// ./gradlew  periodicTest -Pconfig=test/input/sf-light/sf-light-1k.conf -Piterations=1
////////////////////////////////////////////////////////////////////////////////////////////////////////////
task periodicTest(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o', '-n', 'beam.tags.Periodic'] <<
    (project.hasProperty('config') ? '-Dconfig='+project.findProperty('config') :
            (project.hasProperty('iterations') ? '-Diterations='+project.findProperty('iterations') : '')) <<
    (project.hasProperty('config') && project.hasProperty('iterations') ?
            '-Diterations='+project.findProperty('iterations') : '')
    jvmArgs = ['-javaagent:build/aspectjweaver-1.8.10.jar']
    classpath = sourceSets.test.runtimeClasspath

    doFirst() {
        if (!project.file('build/aspectjweaver-1.8.10.jar').exists()) {
            download {
                src 'http://central.maven.org/maven2/org/aspectj/aspectjweaver/1.8.10/aspectjweaver-1.8.10.jar'
                dest buildDir
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////
// Amazon WS task to run beam sim on Lambda
//////////////////////////////////////////////////////////////////////

apply plugin: "base"
apply plugin: "jp.classmethod.aws.lambda"

aws {
    profileName = "gradle"
    region = "us-east-2"
}

lambda {
    region = "us-east-2"
}

def getCurrentGitBranch() {
    def gitBranch = "$defaultBranch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}

task deploy(type: AWSLambdaInvokeTask) {
    doFirst {
        if(!project.hasProperty('runName')) {
            throw new GradleException('Please name the run by specifying `runName` argument. e.g; ./gradlew deploy -PrunName=sfbay-performance-run')
        }

        switch (project.findProperty('deployMode')) {
            case 'config':
                if(!project.hasProperty('beamConfigs') && !project.hasProperty(getCurrentGitBranch()+'.configs')) {
                    throw new GradleException('beamConfigs is required to deploy config run.')
                }
                break
            case 'experiment':
                if(!project.hasProperty('beamExperiments') && !project.hasProperty(getCurrentGitBranch()+'.experiments')) {
                    throw new GradleException('beamExperiments is required to deploy experement.')
                }
                break
            case 'execute':
                if(!project.hasProperty('executeClass') || !project.hasProperty('executeArgs')) {
                    throw new GradleException('executeClass and executeArgs are required to deploy execute.')
                }
                break
            default:
                throw new GradleException('Please provide a valid deployMode.')
                break
        }
    }

    def pload = """{
  "title": "${project.findProperty('runName')}",
  "branch": "${project.findProperty('beamBranch') ?: getCurrentGitBranch()}",
  "commit": "${beamCommit ?: 'HEAD'}",
  "deploy_mode": "${project.findProperty('deployMode')}",
  "configs": "${project.findProperty('beamConfigs') ?: project.findProperty(getCurrentGitBranch()+'.configs') }",
  "experiments": "${project.findProperty('beamExperiments') ?: project.findProperty(getCurrentGitBranch()+'.experiments') }",
  "execute_class": "${project.findProperty('executeClass')}",
  "execute_args": "${project.findProperty('executeArgs')}",
  "max_ram": "${maxRAM ?: '64g'}",
  "batch": "$beamBatch",
  "s3_publish": "${project.findProperty('s3Backup') ?: true}",
  "instance_type": "${project.findProperty('instanceType') ?: defaultInstanceType}",
  "region": "$region",
  "shutdown_wait": "$shutdownWait",
  "shutdown_behaviour": "$shutdownBehaviour",
  "command": "deploy"
}"""

    functionName = "simulateBeam"
    invocationType = InvocationType.RequestResponse
    payload = pload

    doLast {
        println pload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}

task startEC2(type: AWSLambdaInvokeTask) {
    doFirst {
        if(!project.hasProperty('instanceIds')) {
            throw new GradleException('Please specify instance ids using argument `instanceIds`.')
        }
    }

    def pload = """{
  "instance_ids": "${project.findProperty('instanceIds')}",
  "region": "$region",
  "command": "start"
}"""

    functionName = "ec2StartStop"
    invocationType = InvocationType.RequestResponse
    payload = pload

    doLast {
        println pload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}

task stopEC2(type: AWSLambdaInvokeTask) {
    doFirst {
        if(!project.hasProperty('instanceIds')) {
            throw new GradleException('Please specify instance ids using argument `instanceIds`.')
        }
    }

    def pload = """{
  "instance_ids": "${project.findProperty('instanceIds')}",
  "region": "$region",
  "command": "${project.hasProperty('terminate') ? "terminate" : "stop"}"
}"""

    functionName = "${project.hasProperty('terminate') ? "simulateBeam" : "ec2StartStop"}"
    invocationType = InvocationType.RequestResponse
    payload = pload

    doLast {
        println pload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}
//////////////////////////////////////////////////////////////////////
// Generate config classes reflecting the application.conf file
//////////////////////////////////////////////////////////////////////
task generateConfig {
    doLast {
        def tscfgJarFile = project.file('build/tscfg-'+tscfgVersion+'.jar')
        if (!tscfgJarFile.exists() || !tscfgJarFile.isFile()) {
            download {
                src 'https://github.com/carueda/tscfg/releases/download/v'+tscfgVersion+'/tscfg-'+tscfgVersion+'.jar'
                dest buildDir
            }
        }
        javaexec {
            main = "-jar"
            args = [
                    "build/tscfg-${tscfgVersion}.jar",
                    "--spec", "src/main/resources/beam-template.conf",
                    "--scala",
                    "--pn", "beam.sim.config",
                    "--cn", "BeamConfig",
                    "--dd", "src/main/scala/beam/sim/config/"
            ]
        }
    }
}

task repl(type: JavaExec) {
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args '-usejavacp'
}

task deleteSf {
    doLast {
        if (project.file('production/application-sfbay/r5/network.dat').exists()) {
            delete 'production/application-sfbay/r5/network.dat'
        }
        if (project.file('production/application-sfbay/r5/osm.mapdb').exists()) {
            delete 'production/application-sfbay/r5/osm.mapdb'
        }
        if (project.file('production/application-sfbay/r5/osm.mapdb.p').exists()) {
            delete 'production/application-sfbay/r5/osm.mapdb.p'
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Run Via application plugin
// Note: colon preceding "run" is necessary to only run the main project and not launch the GUI as well.
// ./gradlew :run -PappArgs="['--config', 'production/application-sfbay/beam.conf']"
////////////////////////////////////////////////////////////////////////////////////////////////////////////
mainClassName = "beam.sim.RunBeam"


def myAvailableRam = System.getenv("MAXRAM") ?: (project.findProperty('maxRAM') ?: "130g")


def getCurrentTimestamp = {
    DateTimeFormatter.ofPattern("MM-dd-yyyy_HH-mm-ss")
            .withLocale(Locale.US)
            .withZone(ZoneOffset.UTC)
            .format(Instant.now())
}

def logGC = ["-XX:+PrintGCDetails", "-XX:+PrintGCDateStamps", "-Xloggc:gc_${getCurrentTimestamp()}.log"]

// Use following for remote debug mode
//applicationDefaultJvmArgs = ["-Xmx${myAvailableRam}","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8005"]
applicationDefaultJvmArgs = ["-Xmx130g"] + logGC
println(applicationDefaultJvmArgs)

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }

    doFirst() {
        if (!project.file('build/aspectjweaver-1.8.10.jar').exists()) {
            download {
                src 'http://central.maven.org/maven2/org/aspectj/aspectjweaver/1.8.10/aspectjweaver-1.8.10.jar'
                dest buildDir
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Run ExperimentGenerator from Command line
//  gradle :execute -PmainClass=beam.experiment.ExperimentGenerator -PappArgs="['--experiments', 'test/input/beamville/example-experiment/experiment.yml']"
// Run R5 GUI server
//  gradle --stacktrace :execute -PmainClass=com.conveyal.r5.R5Main -PappArgs="['point','--graphs','production/application-sfbay/r5/']"
////////////////////////////////////////////////////////////////////////////////////////////////////////////

task execute(type:JavaExec) {
    jvmArgs = applicationDefaultJvmArgs
    if(project.hasProperty("mainClass")){
        main = mainClass
    }else{
        main = mainClassName
    }
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

