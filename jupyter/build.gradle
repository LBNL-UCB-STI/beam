buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.palantir.docker-run:com.palantir.docker-run.gradle.plugin:0.32.0'
    }
}

plugins {
    id 'com.palantir.docker-run' version '0.32.0'
}

def imageName = 'jupyter/scipy-notebook:2022-04-02'
def containerName = 'jupyter-for-beam'
def port = '8888'
def token = project.hasProperty("jupyterToken") ? jupyterToken : UUID.randomUUID().toString()

static def tryReadMappingFromFile(filePath, prefix) {
    File file = new File(filePath)
    if (file.exists()) {
        def mapping = [:]
        file.eachLine { pathToFolderToMap ->

            def folder = new File(pathToFolderToMap)
            def exist = folder.exists()

            check if either of following is true:
                1. if path exist "as is"
                2. if pathToMappingFileLocation + path exist

            def nameForJupyter = pathToFolderToMap
                    .tokenize('/')[-1]
                    .tokenize('\\')[-1]
                    .replace('.', '_')
            mapping.put(pathToFolderToMap, prefix + nameForJupyter)
        }
        return mapping
    } else {
        return [:]
    }
}

static def getFoldersToMap() {
    LinkedHashMap<Object, Object> volume_mapping = [:]
    volume_mapping.put('jupyter_home', '/home/jovyan')

    def outputFolderPath = new File(".").getCanonicalPath() + "/output"
    def outputFolder = new File(outputFolderPath)
    if (outputFolder.exists()) {
        volume_mapping.put(outputFolderPath, '/home/jovyan/output')
    }

    volume_mapping.put('local_files', '/home/jovyan/local_files')

    volume_mapping = volume_mapping +
            tryReadMappingFromFile('jupyter/.foldersToMapInJupyter.txt', '/home/jovyan/') +
            tryReadMappingFromFile('jupyter/local_files/.foldersToMapInJupyter.txt', '/home/jovyan/')

    println "Following folders will be mounted (path in jupyter <- local path):"
    volume_mapping.each { local_path, jupyter_path -> println "'$jupyter_path' <- '$local_path'" }

    return volume_mapping
}

dockerRun {
    name "$containerName"
    image "$imageName"
    volumes getFoldersToMap() as Map<Object, String>
    ports "$port:8888"
    daemonize true
    clean true
    env 'GRANT_SUDO': 'yes', 'JUPYTER_TOKEN': "$token", "CHOWN_HOME": "yes", "CHOWN_HOME_OPTS": '-R'
    arguments "--group-add=users"
}

task jupyterStart(dependsOn: ['dockerRun']) {
    description 'Starts Jupyter container.'
    group 'Jupyter'

    def url = "http://127.0.0.1:$port/?token=$token"

    doLast {
        println """Jupyter Lab from image '$imageName' started with container name '$containerName'."""
        println """Web interface is here: $url"""
    }
}

task jupyterStop(dependsOn: ['dockerStop']) {
    description 'Stops Jupyter container.'
    group 'Jupyter'

    doLast {
        println """Docker container with name '$containerName' stopped."""
    }
}
