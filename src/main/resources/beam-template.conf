# Note: this configuration file assumes you have the following environment variables set
# BEAM_SHARED_INPUTS=/path/to/beam-developers/model-inputs/
# BEAM_OUTPUTS=/path/to/your/preferred/output/destination/
#
# NOTE: use values without ending slash
#
# This file need to be placed in the same folder as other MATSim input file ( population.xml, network.xml, etc.)
# because we need to set context see MatSimBeamConfigBuilder.buildMatSamConf()


my-custom-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

akka {
  actor {
    serializers {
#      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
#      java = "java.lang.String"
    }
    debug {
      # enable DEBUG logging of unhandled messages
      unhandled = on
    }
  }
  loglevel = "DEBUG"
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
  }
}
##################################################################
# SIMULATION
##################################################################
beam.sharedInputs = ${?BEAM_SHARED_INPUTS}
beam.agentsim.simulationName = "dev"
beam.agentsim.numAgents = 100

##################################################################
# OUTPUTS
##################################################################
beam.outputs.outputDirectory = ${?BEAM_OUTPUTS}
beam.outputs.eventsFileOutputFormats = "csv" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writeEventsInterval = 1
beam.outputs.writePlansInterval = 0

# Exploding events will break all event writers up into individual files by event type
beam.outputs.explodeEventsIntoFiles = false

# Logging Levels:
# >0 enables loggin, <=0 suppresses logging.
# Any event types not explicitly listed take on Default.level
beam.outputs.defaultLoggingLevel = 1
beam.outputs.overrideLoggingLevels = [
  { classname: "beam.playground.metasim.events.ActionEvent", value: 1},
  { classname: "beam.playground.metasim.events.TransitionEvent", value: 1}
]

##################################################################
# OTP ROUTING SERVICE
##################################################################
beam.routing.otp.directory = ${beam.sharedInputs}"/model-inputs/otp"
beam.routing.otp.routerIds = ["sf"]

##################################################################
# Events Filtering
##################################################################
beam.events.pathTraversalEvents = ["car","bus","subway","tram","rail","car","walk","taxi","cable_car"]
beam.events.filterDist = 10000.0


##################################################################
# GTFS Downloader Params
##################################################################
beam.routing.gtfs.operatorsFile = "src/main/resources/GTFSOperators.csv"
beam.routing.gtfs.outputDir = ${beam.outputs.outputDirectory}"/gtfs"
beam.routing.gtfs.apiKey = ${?GTFS_API_KEY}
beam.routing.gtfs.crs="epsg:26910"

##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "Atlantis"
  }
  network {
    inputNetworkFile = ${beam.sharedInputs}"/model-input/dev/multimodalnetwork.xml"
  }
  plans {
    inputPlansFile = ${beam.sharedInputs}"/model-inputs/dev/population-500.xml"
  }
  strategy {
    maxAgentPlanMemorySize = 5

    ModuleProbability_1 = 0.7
    Module_1 = "BestScore"

    #    ModuleProbability_2 = 0.1
    #    Module_2 = "ReRoute"

    ModuleProbability_3 = 0.1
    Module_3 = "TimeAllocationMutator"

    #    ModuleProbability_4 = 0.1
    #    Module_4 = "ChangeTripMode"
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 1000000000
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads= 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    outputDirectory = ${beam.outputs.outputDirectory}"/pt-tutorial"
    firstIteration = 0
    lastIteration = 1
    eventsFileFormat = "xml"
    #Replacing w/ own mobsim soon...
    mobsim = "metasim"
  }
  gsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime="00:00:00"
    endTime="30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    transitScheduleFile = "transitschedule.xml"
    vehiclesFile = "transitVehicles.xml"
    transitModes = "pt"
  }
  changeMode {
    modes="car,pt"
  }
  planCalcScore {
    learningRate = "1.0"
    BrainExpBeta= "2.0"
    lateArrival= "-18"
    earlyDeparture = "-0"
    performing = "+6"
    traveling="-6"
    waiting="-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }
    ]
  }
}
