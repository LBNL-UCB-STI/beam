##################################################################
# SIMULATION
##################################################################
beam.inputDirectory = "/test/input/beamville"
beam.agentsim.simulationName = "beamville"
beam.agentsim.numAgents = 100
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.thresholdForMakingParkingChoiceInMeters = 100
beam.agentsim.maxWindow = "double | 300.0"
beam.agentsim.stopTick = "double | 86400.0"

# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom ModeChoiceLCCM
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.cost = "double | -1.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.time = "double | -0.0047"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = "double | -1.4"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = "double | 0.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = "double | 0.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = "double | 0.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hailing_intercept = "double | -2.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = "double | 0.0"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = "double | 0.0"
beam.agentsim.agents.modalBehaviors.lccm.paramFile = ${beam.inputDirectory}"/lccm-long.csv"
#TAZ params
beam.agentsim.taz.file=${beam.inputDirectory}"/taz-centers.csv"
beam.agentsim.taz.parking=${beam.inputDirectory}"/taz-parking.csv"
# Ride Hailing Params
beam.agentsim.agents.rideHailing.numDriversAsFractionOfPopulation=0.5
beam.agentsim.agents.rideHailing.defaultCostPerMile=1.25
beam.agentsim.agents.rideHailing.defaultCostPerMinute=0.75
# SurgePricing parameters
beam.agentsim.agents.rideHailing.surgePricing.timeBinSize="int | 3600"
beam.agentsim.agents.rideHailing.surgePricing.surgeLevelAdaptionStep="double | 0.1"
beam.agentsim.agents.rideHailing.surgePricing.minimumSurgeLevel="double | 0.1"
beam.agentsim.agents.rideHailing.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
beam.agentsim.agents.rideHailing.surgePricing.numberOfCategories="int | 6"

# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = "double | 1.0"
beam.agentsim.tuning.transitPrice = "double | 1.0"
beam.agentsim.tuning.tollPrice = "double | 1.0"
beam.agentsim.tuning.rideHailPrice = "double | 1.0"
# PhysSim Scaling Params
beam.physsim.flowCapacityFactor = "double | 1.0"
beam.physsim.storageCapacityFactor = "double | 1.0"
beam.physsim.writeEventsInterval = "int | 0"
beam.physsim.writePlansInterval = "int | 0"
beam.physsim.writeMATSimNetwork = "boolean | false"
beam.physsim.linkstatsWriteInterval = "int | 1"
beam.physsim.linkstatsBinSize = "int | 3600"
beam.physsim.ptSampleSize = "double | 1.0"
##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = false
beam.debug.skipOverBadActors = false
beam.debug.secondsToWaitForSkip = 10
beam.debug.memoryConsumptionDisplayTimeoutInSec = "int | 0"

##################################################################
# Metrics
##################################################################
beam.metrics.level = "verbose"

##################################################################
# OUTPUTS
##################################################################
# The outputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = "/test/output"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writePlansInterval = 0
beam.outputs.writeEventsInterval = 1

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Exploding events will break all event writers up into individual files by event type
beam.outputs.events.explodeIntoFiles = false

# Events Writing Logging Levels:
# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
beam.outputs.events.defaultWritingLevel = "OFF" # valid options:VERBOSE,REGULAR,SHORT,OFF
beam.outputs.events.overrideWritingLevels = "beam.agentsim.events.ModeChoiceEvent:VERBOSE, beam.agentsim.events.PathTraversalEvent:VERBOSE"

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:32631"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 5000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2016-10-17T00:00:00-07:00"
  transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = "double | 15.0"
    numberOfSamples = "int | 1"
    osmFile = ${beam.inputDirectory}"/r5/beamville.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
  }

##################################################################
# GTFS Downloader Params
##################################################################
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.baseOutputDirectory}"/gtfs"
    apiKey = ${?GTFS_API_KEY}
    crs = "epsg:26910"
  }
}

##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "Atlantis"
  }
  network {
    inputNetworkFile = ${beam.inputDirectory}"/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.inputDirectory}"/population.xml"
    inputPersonAttributesFile = ${beam.inputDirectory}"/populationAttributes.xml"
  }
  households {
    inputFile = ${beam.inputDirectory}"/households.xml"
    inputHouseholdAttributesFile = ${beam.inputDirectory}"/householdAttributes.xml"
  }
  vehicles {
    vehiclesFile = ${beam.inputDirectory}"/vehicles.xml"
  }
  strategy {
    maxAgentPlanMemorySize = 5

    ModuleProbability_1 = 0.7
    Module_1 = "BestScore"

    #    ModuleProbability_2 = 0.1
    #    Module_2 = "ReRoute"

    ModuleProbability_3 = 0.1
    Module_3 = "TimeAllocationMutator"

    #    ModuleProbability_4 = 0.1
    #    Module_4 = "ChangeTripMode"
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 1000000000
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads= 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    outputDirectory = ${beam.outputs.baseOutputDirectory}"/pt-tutorial"
    firstIteration = 0
    lastIteration = 0
    eventsFileFormat = "xml"
    #Replacing w/ own mobsim soon...
    mobsim = "metasim"
    overwriteFiles = "overwriteExistingFiles"
  }
  qsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime="00:00:00"
    endTime="30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    vehiclesFile = ${beam.inputDirectory}/"transitVehicles.xml"
    transitModes = "pt"
  }
  changeMode {
    modes="car,pt"
  }
  planCalcScore {
    learningRate = "1.0"
    BrainExpBeta= "2.0"
    lateArrival= "-18"
    earlyDeparture = "-0"
    performing = "6.0"
    traveling="-6.0"
    waiting="-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }
    ]
  }
}

