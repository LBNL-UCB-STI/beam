import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.InvokeResult
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask


buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.35"
    }
}

group = 'beam'
version = '0.8.0'

apply plugin: "base"
apply plugin: "jp.classmethod.aws.lambda"

aws {
    profileName = "gradle"
    region = "us-east-2"
}

lambda {
    region = "us-east-2"
}

task deploy(type: AWSLambdaInvokeTask) {
    doFirst {
        def propsFileName = "../gradle.deploy.properties"
        if (project.hasProperty('propsFile')) {
            propsFileName = project.findProperty('propsFile')
        }

        def propsFile = new Properties()
        propsFile.load(project.file(propsFileName).newDataInputStream())

        ext.getParameterValue = { paramName ->
            if (project.hasProperty(paramName)) {
                return project.findProperty(paramName)
            } else {
                return propsFile.getProperty(paramName)
            }
        }

        if (!ext.getParameterValue('runName')) {
            throw new GradleException('Please name the run by specifying `runName` argument. e.g; ./gradlew deploy -PrunName=sfbay-performance-run')
        }

        switch (ext.getParameterValue('deployMode')) {
            case 'config':
                if (!ext.getParameterValue('beamConfigs') && !ext.getParameterValue(getCurrentGitBranch() + '.configs')) {
                    throw new GradleException('beamConfigs is required to deploy config run.')
                }
                break
            case 'experiment':
                if (!ext.getParameterValue('beamExperiments') && !ext.getParameterValue(getCurrentGitBranch() + '.experiments')) {
                    throw new GradleException('beamExperiments is required to deploy experement.')
                }
                break
            case 'execute':
                if (!ext.getParameterValue('executeClass') || !ext.getParameterValue('executeArgs')) {
                    throw new GradleException('executeClass and executeArgs are required to deploy execute.')
                }
                break
            default:
                throw new GradleException('Please provide a valid deployMode.')
                break
        }

        def pload = """{
  "title": "${ext.getParameterValue('runName') + '_' + getCurrentGitUserEmail()}",
  "branch": "${ext.getParameterValue('beamBranch') ?: getCurrentGitBranch()}",
  "commit": "${ext.getParameterValue('beamCommit') ?: 'HEAD'}",
  "deploy_mode": "${ext.getParameterValue('deployMode')}",
  "configs": "${ext.getParameterValue('beamConfigs') ?: ext.getParameterValue(getCurrentGitBranch() + '.configs')}",
  "experiments": "${ext.getParameterValue('beamExperiments') ?: ext.getParameterValue(getCurrentGitBranch() + '.experiments')}",
  "execute_class": "${ext.getParameterValue('executeClass')}",
  "execute_args": "${ext.getParameterValue('executeArgs')}",
  "max_ram": "${ext.getParameterValue('maxRAM') ?: '140g'}",
  "storage_size": ${ext.getParameterValue('storageSize')},
  "batch": "${ext.getParameterValue('beamBatch')}",
  "s3_publish": "${ext.getParameterValue('s3Backup') ?: true}",
  "instance_type": "${ext.getParameterValue('instanceType') ?: defaultInstanceType}",
  "region": "${ext.getParameterValue('region') ?: defaultRegion}",
  "shutdown_wait": "${ext.getParameterValue('shutdownWait')}",
  "shutdown_behaviour": "${ext.getParameterValue('shutdownBehaviour')}",
  "command": "deploy"
}"""
        functionName = "simulateBeam"
        invocationType = InvocationType.RequestResponse
        payload = pload
    }

    doLast {
        println payload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}

task deployPilates(type: AWSLambdaInvokeTask) {
    doFirst {
        def propsFileName = "../gradle.deployPILATES.properties"
        if (project.hasProperty('propsFile')) {
            propsFileName = project.findProperty('propsFile')
        }

        def propsFile = new Properties()
        propsFile.load(project.file(propsFileName).newDataInputStream())

        ext.getParameterValue = { paramName ->
            if (project.hasProperty(paramName)) {
                return project.findProperty(paramName)
            } else {
                return propsFile.getProperty(paramName)
            }
        }

        def defaultParamVals = [:]
        def defRegion = ext.getParameterValue('region') ?: defaultRegion
        defaultParamVals['region'] = defRegion
        defaultParamVals['dataRegion'] = defRegion
        defaultParamVals['beamBranch'] = getCurrentGitBranch()

        def paramMap = [:]
        def missing = []

        // all possible parameters
        ['runName', 'pilatesScenarioName',
         'beamBranch', 'beamCommit',
         'beamConfig',
         'startYear', 'countOfYears', 'beamItLen', 'urbansimItLen',
         'initialS3UrbansimInput', 'initialS3UrbansimOutput', 'initialSkimPath',
         'pilatesImageVersion', 'pilatesImageName',
         's3OutputBucket', 's3OutputBasePath',
         'inYearOutput', 'maxRAM',
         'storageSize', 'instanceType', 'dataRegion', 'region',
         'shutdownWait', 'shutdownBehaviour'].each {
            def pval = ext.getParameterValue(it)
            if (pval) {
                paramMap[it] = pval
            } else if (defaultParamVals.containsKey(it)) {
                paramMap[it] = defaultParamVals[it]
            } else {
                missing += it
            }
        }

        paramMap['runName'] = paramMap['runName'] + '_' + getCurrentGitUserEmail()

        println("parameters wasn't specified: " + missing.join(', '))

        // create a string with json object which contains all parameters
        def pload = "{\n" + paramMap.collect { key, val -> "   \"$key\": \"$val\"" }.join(",\n") + "\n}"

        functionName = "runPilates"
        invocationType = InvocationType.RequestResponse
        payload = pload
    }

    doLast {
        println payload
        println new String(invokeResult.payload.array(), "UTF-8")
    }
}

task startEC2(type: AWSLambdaInvokeTask) {
    doFirst {
        checkInstanceId()

        functionName = "ec2StartStop"
        invocationType = InvocationType.RequestResponse
        payload = buildPayload("start")
    }

    doLast {
        printResult(payload, invokeResult)
    }
}

task stopEC2(type: AWSLambdaInvokeTask) {
    doFirst {
        checkInstanceId()

        functionName = "ec2StartStop"
        invocationType = InvocationType.RequestResponse
        payload = buildPayload("stop")
    }

    doLast {
        printResult(payload, invokeResult)
    }
}

task terminateEC2(type: AWSLambdaInvokeTask) {
    doFirst {
        checkInstanceId()

        functionName = "simulateBeam"
        invocationType = InvocationType.RequestResponse
        payload = buildPayload("terminate")
    }

    doLast {
        printResult(payload, invokeResult)
    }
}

def checkInstanceId() {
    if (!project.hasProperty('instanceIds')) {
        throw new GradleException('Please specify instance ids using argument `instanceIds`.')
    }
}

def buildPayload(command) {
    println "command:"+command
    return """{
  "instance_ids": "${project.findProperty('instanceIds')}",
  "region": "${project.findProperty('region') ?: defaultRegion}",
  "command": "$command"
}"""
}

def printResult(pload, result) {
    println pload
    println new String(result.payload.array(), "UTF-8")
}

def getCurrentGitBranch() {
    return getGitResultFromWorkingDirUsing('git rev-parse --abbrev-ref HEAD', "$defaultBranch")
}

def getCurrentGitUserEmail() {
    def rawGitUserEmail = getGitResultFromWorkingDirUsing('git config user.email', "GitUserEmailNotFound")
    return rawGitUserEmail.replaceAll('@',"AT").replaceAll("\\.", "_")
}

def getGitResultFromWorkingDirUsing(command, defaultResult) {
    def gitResult = defaultResult
    try {
        def workingDir = new File("${project.projectDir}")
        def result = command.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitResult = result.text.trim()
        }
    } catch (ignored) {
    }
    return gitResult
}
