{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./defaultValues.ts","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts","webpack:///./dataTransformator.ts","webpack:///./Trace.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","defaultValues","defaultTrace","mapping","x","y","z","text","color","size","show","line","markers","settings","width","dash","shape","marker","symbol","colorscale","sizemode","sizemin","sizeref","showscale","color_option","defaultQueryDescription","columnNames","dataColumn","xColumn","yColumn","lonColumn","latColumn","queryTitle","queryNumber","yaxistext","defaultConfig","pconfig","loadFromCDN","showAnnotations","fixScale","traces","type","fill","displayModeBar","map","latMin","latMax","lonMin","lonMax","layout","showlegend","legend","orientation","barmode","dragmode","font","family","xaxis","autorange","fixedrange","showgrid","zeroline","rangemode","yaxis","_sdk","_SeriesWrapper","_editor","_libLoader","_anno","_dataTransformator","_defaultValues","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","uiSegmentSrv","annotationsSrv","variableSrv","_this","this","debug","defaultPanelConfigs","dataList","pointsSelected","annotations","AnnoInfo","seriesByKey","Map","seriesHash","newTracesBarCount","newTracesMapFirstNumber","yAxisTitleForScatterMapBox","mapArea","lat","lon","zoom","dashboardVariables","dataWarnings","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","height","redraw","console","log","warn","deepCopyWithTemplates","obj","isArray","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","defaultsDeep","cfg","a","events","loadPlotly","then","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","dashboardVariablesUpdate","clear","variables","dashboardVariable","set","current","dashboardVariableNumericValue","variableName","has","Number","parseFloat","err","series","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","old","show_1","indexOf","lines","trace","version","onPanelInitialized","getProcessedLayout","scaleanchor","labelStyle","style","_jquery2","parse","scale","toString","gridcolor","oldLayout","latMinVarName","latMaxVarName","lonMinVarName","lonMaxVarName","Math","max","abs","mapbox","domain","center","title","b","pad","range","drawPlot","options","showLink","displaylogo","modeBarButtonsToRemove","newTraces","react","onPointsSelected","data","points","displayQueries","displaySelectedTrace_1","selectedTraceNumber","visible","queriesDescription","curveNumber","snapshot","firstTraces","secondTraces","thirdTraces","filter","dataRow","index","querieDescription","element","graphType","_a","dataTransformator","toTraces","sortedSeries","allColumnNames","dataColumnNames","all","serie","xVals","String","yVals","push","_b","toLatLonTraces","mapTrace","barTrace","visibility","len","Array","finfo","useRefID_1","targets","sidx","refId","fromCharCode","charCodeAt","columns","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","getAllKeys","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","shapes","getAnnotations","dashboard","results","hasAnno","update","loadIfNecessary","res","purge","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","toArray","vals","table","rows","col","Error","row","u","h","REMOVE_KEY","axis","queryIndex","selectQuery","defaultMappings","time","changed","defaults","onUpdateAxis","label","segment","queries","cloneDeep","query","createQuery","queryDescription","q","number","removeCurrentQuery","splice","createTraceName","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","path","force","test","loading","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity","_Trace","normalize","newMin","newMax","min","delta","newDelta","dataSet","xValueFilter","ident","GeoPoint","MapKey","graphPoints","mapPoints","dataColumn_1","xColumn_1","latColumn_1","lonColumn_1","dbRequestRow","dataRaw","dataVal","xRaw","xVal","lonRaw","latRaw","point","lon_1","lat_1","exist","pointsCount","maxHour","_pointVal","pointKey","hoursCount","X","Y","pointVal","normalizedData","traceDataColumn_1","xValueColumn_1","yValueColumn_1","sort","obj1","obj2","obj1order","obj2order","traceName","traceX","traceY","Date","getHours","Trace","prevTraceX","from","values","s1","s2","localeCompare","numeric"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export class defaultValues {\n    public static defaultTrace = {\n        mapping: {\n            x: null,\n            y: null,\n            z: null,\n            text: null,\n            color: null,\n            size: null,\n        },\n        show: {\n            line: true,\n            markers: true,\n        },\n        settings: {\n            line: {\n                color: '#005f81',\n                width: 6,\n                dash: 'solid',\n                shape: 'linear',\n            },\n            marker: {\n                size: 15,\n                symbol: 'circle',\n                color: '#33B5E5',\n                colorscale: 'YlOrRd',\n                sizemode: 'diameter',\n                sizemin: 3,\n                sizeref: 0.2,\n                line: {\n                    color: '#DDD',\n                    width: 0,\n                },\n                showscale: false,\n            },\n            color_option: 'ramp',\n        },\n    };\n\n    public static defaultQueryDescription = {\n        columnNames: {\n            dataColumn: \"\",\n            xColumn: \"\",\n            yColumn: \"\",\n            lonColumn: \"\",\n            latColumn: \"\",\n        },\n        queryTitle: \"\",\n        queryNumber: 0,\n        color: \"gray\",\n        yaxistext: \"\"\n    }\n\n    public static defaultConfig = {\n        pconfig: {\n            loadFromCDN: false,\n            showAnnotations: true,\n            fixScale: '',\n            traces: [defaultValues.defaultTrace],\n            settings: {\n                type: 'bar',\n                fill: 'None',\n                mode: 'None',\n                displayModeBar: true,\n                map: {\n                    latMin: \"lat_min\",\n                    latMax: \"lat_max\", \n                    lonMin: \"lon_min\",\n                    lonMax: \"lon_max\"\n                },\n            },\n            // dataColumnNames: {\n            //     dataColumn: '',\n            //     xColumn: '',\n            //     yColumn: ''\n            // },\n            // queriesDescription: [\n            //     {\n            //         columnNames: {\n            //             dataColumn: \"count\",\n            //             xColumn: \"simulation-hour\",\n            //             lonColumn: \"lon\",\n            //             latColumn: \"lat\",\n            //         },\n            //         queryTitle: \"count of events\",\n            //         queryNumber: \"1\",\n            //         color: 'green'\n            //     },\n            //     {\n            //         columnNames: {\n            //             dataColumn: \"averageLoad\",\n            //             xColumn: \"simulation-hour\",\n            //             lonColumn: \"lon\",\n            //             latColumn: \"lat\"\n            //         },\n            //         queryTitle: \"average charging load\",\n            //         queryNumber: \"0\",\n            //         color: 'blue'\n            //     },\n            // ],\n            layout: {\n                showlegend: false,\n                legend: {\n                    orientation: 'h',\n                },\n                barmode: 'stack',\n                dragmode: 'zoom', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n                //hovermode: 'compare', // 'closest',\n                font: {\n                    family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n                },\n                xaxis: {\n                    autorange: true,\n                    fixedrange: false,\n                    showgrid: true,\n                    zeroline: false,\n                    type: 'auto',\n                    rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n                },\n                yaxis: {\n                    autorange: true,\n                    fixedrange: false,\n                    showgrid: true,\n                    zeroline: false,\n                    type: 'linear',\n                    rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n                },\n            },\n        },\n    };\n}","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport { EditorHelper } from './editor';\n\nimport { loadPlotly, loadIfNecessary } from './libLoader';\nimport { AnnoInfo } from './anno';\nimport { Trace } from './Trace';\nimport { dataTransformator } from './dataTransformator';\nimport { defaultValues } from './defaultValues';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n  debug = false\n\n  initialized: boolean;\n\n  defaultPanelConfigs: any = defaultValues.defaultConfig;\n\n  graphDiv: any;\n  dataList: any[] = [];\n  pointsSelected: any = undefined;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  dataColumns: any[];\n  newTraces: any[];\n  newTracesBarCount: number = 0; // count of traces for bar chart when 'scattermapbox' graph type has chosen\n  newTracesMapFirstNumber: number = 0; // count of traces for bar chart when 'scattermapbox' graph type has chosen\n  yAxisTitleForScatterMapBox: any = '' // title for Y axis, only for 'scattermapbox'\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mapArea: { lat: number, lon: number, zoom: number } = {\n    lat: 0,\n    lon: 0,\n    zoom: 0\n  }\n\n  mouse: any;\n  cfg: any;\n\n  variableSrv: any;\n  dashboardVariables: Map<string, any> = new Map();\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[] = [] // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    // private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv,\n    variableSrv\n  ) {\n    super($scope, $injector);\n\n    this.variableSrv = variableSrv;\n\n    this.initialized = false;\n\n    // defaults configs\n    _.defaultsDeep(this.panel, this.defaultPanelConfigs);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      if (this.debug) { console.log('Plotly', v); }\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n\n      if (this.debug) { console.log('redraw with layout:', this.layout); }\n    }\n  }, 50);\n\n  dashboardVariablesUpdate() {\n    this.dashboardVariables.clear();\n\n    this.variableSrv.variables.forEach(dashboardVariable => {\n      this.dashboardVariables.set(dashboardVariable.name, dashboardVariable.current.value)\n    })\n\n    if (this.debug) { console.log(\"dashboard vars:\", this.dashboardVariables) }\n  }\n\n  dashboardVariableNumericValue(variableName) {\n    if (this.dashboardVariables.has(variableName)) {\n      return Number.parseFloat(this.dashboardVariables.get(variableName))\n    }\n\n    if (this.debug) { console.log('there is no such dashboard variable with name', variableName) }\n    return 0.0\n  }\n\n  onResize() {\n    if (this.debug) {\n      console.log('onResize', this.graphDiv, this.layout, Plotly, this.graphDiv && this.layout && Plotly)\n    }\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Queries', 'public/plugins/natel-plotly-panel/partials/tab_queries.html', 3);\n    // this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 4);\n    // this.editorTabIndex = 1;\n\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      if (this.debug) { console.log('RESIZE in editor'); }\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    if (this.debug) { console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion); }\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    if (this.debug) { console.log('After Migration:', cfg); }\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    // this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    // get the css rule of grafana graph axis text\n    const labelStyle = this.getCssRule('div.flot-text');\n    if (labelStyle) {\n      let color = labelStyle.style.color;\n      if (!layout.font) {\n        layout.font = {};\n      }\n      layout.font.color = color;\n\n      // make the grid a little more transparent\n      color = $.color\n        .parse(color)\n        .scale('a', 0.22)\n        .toString();\n\n      // set gridcolor (like grafana graph)\n      layout.xaxis.gridcolor = color;\n      layout.yaxis.gridcolor = color;\n    }\n\n    let oldLayout = this.graphDiv.layout\n\n    // for scattermapbox: display two plots instead of one\n    // one plot is bars and another is scattermapbox\n    if (this.cfg.settings.type === 'scattermapbox') {\n      let latMinVarName = this.cfg.settings.map.latMin\n      let latMaxVarName = this.cfg.settings.map.latMax\n      let lonMinVarName = this.cfg.settings.map.lonMin\n      let lonMaxVarName = this.cfg.settings.map.lonMax\n\n      let latMin = this.dashboardVariableNumericValue(latMinVarName)\n      let latMax = this.dashboardVariableNumericValue(latMaxVarName)\n      let lonMin = this.dashboardVariableNumericValue(lonMinVarName)\n      let lonMax = this.dashboardVariableNumericValue(lonMaxVarName)\n\n      let lat = (latMin + latMax) / 2\n      let lon = (lonMin + lonMax) / 2\n\n      let diff = Math.max(Math.abs(latMax - latMin), Math.abs(lonMax - lonMin))\n      let zoom = 11 - (diff * 1.4) // 1.4 - empirically chosen constant\n\n      layout.mapbox = {\n        domain: {\n          x: [0, 1],\n          y: [0, 0.8]\n        },\n        center: { lon: lon, lat: lat },\n        style: \"open-street-map\",\n        zoom: zoom\n      }\n      layout.xaxis.domain = [0, 1]\n      layout.yaxis.domain = [0.85, 1]\n\n      layout.yaxis.title = this.yAxisTitleForScatterMapBox\n\n      // so, map zoom|lat|lon won't change from the values user specifieed manually\n      // unless we obtain new set of dashboard variables\n      if (oldLayout && oldLayout.mapbox && oldLayout.mapbox.center) {\n        if (this.mapArea.zoom != zoom || this.mapArea.lat != lat || this.mapArea.lon != lon) {\n          this.mapArea.zoom = zoom;\n          this.mapArea.lat = lat;\n          this.mapArea.lon = lon;\n        } else {\n          layout.mapbox.center = oldLayout.mapbox.center\n          layout.mapbox.zoom = oldLayout.mapbox.zoom\n        }\n      }\n    }\n\n    layout.margin = {\n      l: layout.yaxis.title ? 50 : 35,\n      r: 5,\n      t: 0,\n      b: layout.xaxis.title ? 65 : 30,\n      pad: 2,\n    };\n\n    delete layout.scene;\n    delete layout.zaxis;\n    delete layout.xaxis.range;\n    delete layout.yaxis.range;\n\n    if (oldLayout && oldLayout.xaxis && oldLayout.yaxis && oldLayout.xaxis.range && oldLayout.yaxis.range) {\n      layout.xaxis.range = oldLayout.xaxis.range\n      layout.yaxis.range = oldLayout.yaxis.range\n    }\n    if (oldLayout) {\n      layout.dragmode = oldLayout.dragmode\n    }\n\n    return layout;\n  }\n\n  drawPlot() {\n    const options = {\n      showLink: false,\n      displaylogo: false,\n      // scrollZoom: true,\n      displayModeBar: this.cfg.settings.displayModeBar,\n      modeBarButtonsToRemove: ['sendDataToCloud', 'lasso2d'], //, 'select2d', 'pan2d']\n    };\n\n    this.layout = this.getProcessedLayout();\n\n    if (this.debug) { console.log(\"draw plot with\", 'data', this.newTraces, 'layout', this.layout, 'options', options); }\n    Plotly.react(this.graphDiv, this.newTraces, this.layout, options);\n  }\n\n  onPointsSelected(data) {\n    if (!data || !data.points || !data.points.length || data.points[0].data.type != 'bar') {\n      return;\n    }\n\n    this.pointsSelected = {}\n    data.points.forEach(p => this.pointsSelected[p.x] = true)\n\n    this.displayQueries()\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n\n      // only for 'scattermapbox' graph type\n      // function to:\n      // - display selected bar trace and corresponding map trace\n      // - hide the rest traces\n      // - change Y axis text\n      let displaySelectedTrace = (selectedTraceNumber: number) => {\n        this.newTraces.forEach(trace => {\n          trace.visible = 'legendonly';\n        })\n\n        this.newTraces[selectedTraceNumber].visible = 'true';\n        this.newTraces[selectedTraceNumber + this.newTracesMapFirstNumber].visible = 'true';\n        this.yAxisTitleForScatterMapBox = this.cfg.queriesDescription[selectedTraceNumber].yaxistext;\n\n        this.drawPlot();\n      }\n\n      if (this.cfg.settings.type === 'scattermapbox') {\n        displaySelectedTrace(0);\n      } else {\n        this.drawPlot();\n      }\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        this.onPointsSelected(data);\n        if (this.debug) { console.log('on click', data); }\n      });\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        this.onPointsSelected(data);\n        if (this.debug) { console.log('on select', data); }\n      });\n\n      if (this.cfg.settings.type === 'scattermapbox') {\n        this.graphDiv.on('plotly_legendclick', data => {\n          let selectedTraceNumber = data.curveNumber\n          if (selectedTraceNumber < this.newTracesBarCount) {\n            displaySelectedTrace(selectedTraceNumber);\n            return false;\n          } else if (selectedTraceNumber < this.newTracesMapFirstNumber) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n\n      this.graphDiv.on('plotly_legenddoubleclick', () => false);\n\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      if (this.debug) { console.log('Not initialized yet!'); }\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  displayQueries() {\n    let firstTraces: any[] = []\n    let secondTraces: any[] = []\n    let thirdTraces: any[] = []\n\n    let pointsSelected = this.pointsSelected\n    let filter = function (value) {\n      if (pointsSelected) {\n        return value in pointsSelected\n      }\n      return true\n    }\n\n    this.dataList.forEach((dataRow, index) => {\n\n      var querieDescription: any;\n\n      this.cfg.queriesDescription.forEach(element => {\n        let queryNumber: number = Number(element.queryNumber)\n        if (queryNumber == index) {\n          querieDescription = element\n        }\n      });\n\n      let queryTitle = querieDescription.queryTitle\n      let columnNames = querieDescription.columnNames\n      let graphType = this.cfg.settings.type;\n      if (!dataRow) {\n        this.dataWarnings.push(\"no data, nothing to display\")\n      } else if (!querieDescription) {\n        this.dataWarnings.push(\"no data description, can't display\")\n      } else if (graphType === 'scatter' || graphType === 'bar') {\n        let { sortedSeries, allColumnNames } = dataTransformator.toTraces(dataRow, columnNames)\n\n        this.cfg.dataColumnNames.all = allColumnNames\n\n        sortedSeries.forEach((serie: Trace) => {\n          let xVals = serie.x.map(String)\n          let yVals = serie.y\n\n          firstTraces.push({\n            x: xVals,\n            y: yVals,\n            type: this.cfg.settings.type,\n            mode: this.cfg.settings.mode,\n            fill: this.cfg.settings.fill,\n            name: serie.name\n          })\n        })\n      } else if (graphType === 'scattermapbox' && columnNames.latColumn && columnNames.lonColumn && columnNames.dataColumn) {\n        let { mapTrace, barTrace, allColumnNames } = dataTransformator.toLatLonTraces(dataRow, columnNames, filter)\n\n        this.cfg.dataColumnNames.all = allColumnNames\n\n        barTrace.marker.color = querieDescription.color\n        barTrace.name = queryTitle\n        firstTraces.push(barTrace)\n\n        mapTrace.marker.color = querieDescription.color\n        mapTrace.name = queryTitle\n        thirdTraces.push(mapTrace)\n      } else {\n        this.dataWarnings.push(\"UNEXPECTED GRAPH TYPE: \" + graphType, 'or lack of data configuration');\n      }\n    });\n\n    // adding a separator between map and bars traces\n    if (this.cfg.settings.type === 'scattermapbox') {\n      secondTraces.push({\n        x: [0],\n        y: [0],\n        type: 'scatter',\n        name: '        ',\n        visible: 'legendonly',\n        mode: 'none'\n      })\n      secondTraces.push({\n        x: [0],\n        y: [0],\n        type: 'scatter',\n        name: '        ',\n        visible: 'legendonly',\n        mode: 'none'\n      })\n    }\n\n    this.newTraces = []\n\n    let visibility: any[] = []\n\n    if (this.graphDiv.data) {\n      this.graphDiv.data.forEach(trace => visibility.push(trace.visible))\n    } else {\n      let len = firstTraces.length + secondTraces.length + thirdTraces.length;\n      visibility = new Array<any>(len);\n      visibility.fill('true');\n    }\n\n    var index = 0\n\n    firstTraces.forEach(trace => {\n      trace.visible = visibility[index]\n      index++\n      this.newTraces.push(trace)\n    })\n\n    this.newTracesBarCount = index;\n\n    secondTraces.forEach(trace => {\n      trace.visible = visibility[index]\n      index++\n      this.newTraces.push(trace)\n    })\n\n    this.newTracesMapFirstNumber = index;\n\n    thirdTraces.forEach(trace => {\n      trace.visible = visibility[index]\n      index++\n      this.newTraces.push(trace)\n    })\n\n    this.drawPlot();\n  }\n\n  onDataReceived(dataList) {\n    this.dataWarnings = [];\n    this.newTraces = []\n\n    if (!dataList || dataList.length < 1) {\n      if (this.debug) { console.log('data is empty:', dataList); }\n      this.drawPlot();\n      return;\n    }\n\n    if (!this.cfg.queriesDescription || this.cfg.queriesDescription.length < 1) {\n      if (this.debug) { console.log('queries discriptions are missing') }\n      this.drawPlot();\n      return;\n    }\n\n    this.dashboardVariablesUpdate();\n\n    if (this.debug) {\n      console.log('data received: dataList', dataList)\n      console.log('data received: queriesDescription', this.cfg.queriesDescription)\n    }\n\n    this.dataList = dataList;\n\n    this.displayQueries();\n\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      // this._updateTraceData();\n      this.render();\n    });\n  }\n\n  /*\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n    // This will update all trace settings *except* the data\n    _updateTracesFromConfigs() {\n  \n      // Make sure we have a trace\n      if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n        this.cfg.traces = [_.cloneDeep(defaultValues.defaultTrace)];\n      }\n  \n      const is3D = this.is3d();\n      this.traces = this.cfg.traces.map((tconfig, idx) => {\n        const config = this.deepCopyWithTemplates(tconfig) || {};\n        _.defaults(config, defaultValues.defaultConfig);\n        const mapping = config.mapping;\n  \n        const trace: any = {\n          name: config.name || EditorHelper.createTraceName(idx),\n          type: this.cfg.settings.type,\n          // mode: 'markers+lines', // really depends on config settings\n          __set: [], // { key:? property:? }\n        };\n  \n        let mode = '';\n        if (config.show.markers) {\n          mode += '+markers';\n          trace.marker = config.settings.marker;\n  \n          delete trace.marker.sizemin;\n          delete trace.marker.sizemode;\n          delete trace.marker.sizeref;\n  \n          if (config.settings.color_option === 'ramp') {\n            this.__addCopyPath(trace, mapping.color, 'marker.color');\n          } else {\n            delete trace.marker.colorscale;\n            delete trace.marker.showscale;\n          }\n        }\n  \n        if (config.show.lines) {\n          mode += '+lines';\n          trace.line = config.settings.line;\n        }\n  \n        // Set the text\n        this.__addCopyPath(trace, mapping.text, 'text');\n        this.__addCopyPath(trace, mapping.x, 'x');\n        this.__addCopyPath(trace, mapping.y, 'y');\n  \n        if (is3D) {\n          this.__addCopyPath(trace, mapping.z, 'z');\n        }\n  \n        // Set the trace mode\n        if (mode) {\n          trace.mode = mode.substring(1);\n        }\n        return trace;\n      });\n    }\n  \n    // Fills in the required data into the trace values\n    _updateTraceData(force = false): boolean {\n      if (!this.series) {\n        // console.log('NO Series data yet!');\n        return false;\n      }\n  \n      if (force || !this.traces) {\n        this._updateTracesFromConfigs();\n      } else if (this.traces.length !== this.cfg.traces.length) {\n        console.log(\n          'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n        );\n        this._updateTracesFromConfigs();\n      }\n  \n      // Use zero when the metric value is missing\n      // Plotly gets lots of errors when the values are missing\n      let zero: any = [];\n      this.traces.forEach(trace => {\n        if (trace.__set) {\n          trace.__set.forEach(v => {\n            const s = this.seriesByKey.get(v.key);\n            let vals: any[] = zero;\n            if (s) {\n              vals = s.toArray();\n              if (vals && vals.length > zero.length) {\n                zero = Array.from(Array(3), () => 0);\n              }\n            } else {\n              if (!this.error) {\n                this.error = '';\n              }\n              this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n            }\n            if (!vals) {\n              vals = zero;\n            }\n            _.set(trace, v.path, vals);\n          });\n        }\n      });\n  \n      return true;\n    }\n  */\n\n  onConfigChanged() {\n    // Force reloading the traces\n    // this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        this.drawPlot();\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => this.mouse = evt);\n  }\n}\n\nexport { PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl };\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport { PlotlyPanelCtrl } from './module';\nimport { defaultValues } from './defaultValues';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  debug = false;\n\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n  trace: any; // Trace Config\n\n  queryIndex = 0;\n  queries: any[];\n  query: any;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n    this.selectQuery(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, defaultValues.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Queries\n  //-----------------------------------------------------------------------\n\n  selectQuery(index: number) {\n    this.queries = this.ctrl.cfg.queriesDescription;\n\n    if (!this.queries || this.queries.length < 1) {\n      this.queries = this.ctrl.cfg.queriesDescription = [_.cloneDeep(defaultValues.defaultQueryDescription)];\n    }\n\n    if (index >= this.queries.length) {\n      index = this.queries.length - 1;\n    }\n\n    this.query = this.queries[index]\n    this.queryIndex = index;\n\n    if (this.debug) {\n      console.log('query select', 'editor:', this);\n    }\n  }\n\n  createQuery() {\n    var queryDescription: any = _.cloneDeep(defaultValues.defaultQueryDescription)\n\n    var queryNumber: number = 0\n    this.queries.forEach(q => {\n      let number: number = Number(q.queryNumber)\n      if (number > queryNumber) {\n        queryNumber = number\n      }\n    })\n\n    if (this.queries.length > 0) {\n      queryNumber += 1\n    }\n\n    queryDescription.queryNumber = queryNumber\n    this.ctrl.cfg.queriesDescription.push(queryDescription)\n    this.selectQuery(queryNumber)\n    this.ctrl.refresh();\n\n    if (this.debug) {\n      console.log('query create', 'new', queryDescription, 'editor:', this)\n    }\n  }\n\n  removeCurrentQuery() {\n    if (!this.query.queryNumber || this.queries.length < 1) {\n      return;\n    }\n\n    for (let i = 0; i < this.ctrl.cfg.queriesDescription.length; i++) {\n      if (this.query.queryNumber === this.ctrl.cfg.queriesDescription[i].queryNumber) {\n        this.ctrl.cfg.queriesDescription.splice(i, 1);\n        if (i >= this.ctrl.cfg.queriesDescription.length) {\n          i = this.ctrl.cfg.queriesDescription.length - 1;\n        }\n\n        this.selectQuery(i);\n        this.ctrl.refresh();\n\n        if (this.debug) {\n          console.log('query remove', 'editor:', this)\n        }\n        return;\n      }\n    }\n\n    this.ctrl.dataWarnings.push('can\\'t delete selected query.')\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.cloneDeep(defaultValues.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, defaultValues.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    //console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      // console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.cloneDeep(defaultValues.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      // console.log(\"series\", series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    // console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push(a.text);\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n","import { Trace } from \"./Trace\";\n\nexport class dataTransformator {\n    static ident = \"dataTransformator\"\n    static debug = false\n\n    static normalize(data: number[], newMin: number, newMax: number): number[] {\n        if (!data || data.length < 1 || newMax < newMin) {\n            return data;\n        }\n\n        var min = data[0];\n        var max = data[0];\n        data.forEach(value => {\n            if (max < value) {\n                max = value;\n            }\n            if (min > value) {\n                min = value;\n            }\n        })\n\n        let delta = max - min;\n        let newDelta = newMax - newMin;\n\n        if (delta != 0) {\n            return data.map(value => {\n                if (value == 0) {\n                    return 0\n                } else {\n                    return ((value - min) / delta) * newDelta + newMin\n                }\n            })\n        }\n        else {\n            return data.map(value => {\n                if (value == 0) {\n                    return 0\n                } else {\n                    return newMin\n                }\n            })\n        }\n    }\n\n    static toLatLonTraces(dataSet, dataColumnNames, xValueFilter) {\n        if (this.debug) {\n            console.log(this.ident, 'whole dataSet', dataSet);\n            console.log(this.ident, 'data columns', dataColumnNames);\n        }\n\n        class GeoPoint {\n            public lat: number = 0\n            public lon: number = 0\n            public data: number = 0\n            public key: string = \"\"\n\n            constructor(lat: number, lon: number, data: number) {\n                this.lat = lat;\n                this.lon = lon;\n                this.data = data;\n                this.key = this.MapKey(lat, lon)\n            }\n\n            public MapKey(lat: number, lon: number): string {\n                return lat.toString() + \":\" + lon.toString()\n            }\n        }\n\n        var graphPoints: Map<number, number> = new Map<number, number>();\n        var mapPoints: Map<string, GeoPoint> = new Map<string, GeoPoint>();\n        var allColumnNames = \"\";\n\n        if (dataSet.rows && dataSet.rows.length > 0) {\n            allColumnNames = dataSet.columns.map((r: { text: string; }) => r.text).join(' ')\n\n            let dataColumn = 0;\n            let xColumn = 0;\n            let latColumn = 0;\n            let lonColumn = 0;\n\n            dataSet.columns.forEach((row, index) => {\n                if (row.text == dataColumnNames.xColumn) {\n                    xColumn = index\n                }\n                if (row.text == dataColumnNames.latColumn) {\n                    latColumn = index\n                }\n                if (row.text == dataColumnNames.lonColumn) {\n                    lonColumn = index\n                }\n                if (row.text == dataColumnNames.dataColumn) {\n                    dataColumn = index\n                }\n            })\n\n            if (this.debug) {\n                console.log(this.ident, 'column names', dataColumnNames)\n                console.log(this.ident, 'columns: data', dataColumn, 'x', xColumn, 'lat', latColumn, 'lon', lonColumn)\n            }\n\n            dataSet.rows.forEach(dbRequestRow => {\n                let dataRaw = dbRequestRow[dataColumn];\n                let dataVal: number = Number(dbRequestRow[dataColumn]);\n                let xRaw = dbRequestRow[xColumn];\n                let xVal: number = Number(dbRequestRow[xColumn]);\n                let lonRaw = dbRequestRow[lonColumn];\n                let latRaw = dbRequestRow[latColumn];\n\n                if (xRaw && dataRaw) {\n                    let point = graphPoints.get(xVal)\n                    if (!point) {\n                        graphPoints.set(xVal, dataVal)\n                    } else {\n                        graphPoints.set(xVal, dataVal + point)\n                    }\n                }\n\n                if (lonRaw && latRaw && dataRaw && xRaw && xValueFilter(xRaw)) {\n                    let lon: number = Number(lonRaw)\n                    let lat: number = Number(latRaw)\n\n                    let point = new GeoPoint(lat, lon, dataVal);\n                    var exist = mapPoints.get(point.key);\n                    if (!exist) {\n                        exist = point\n                    } else {\n                        exist.data = exist.data + point.data;\n                    }\n\n                    mapPoints.set(exist.key, exist);\n                }\n            });\n        }\n\n        let pointsCount = mapPoints.size\n\n        let lat: number[] = new Array<number>(pointsCount);\n        let lon: number[] = new Array<number>(pointsCount);\n        let data: number[] = new Array<number>(pointsCount);\n\n        var index = 0\n        mapPoints.forEach(point => {\n            lat[index] = point.lat;\n            lon[index] = point.lon;\n            data[index] = point.data;\n\n            index++;\n        })\n\n        if (this.debug) {\n            console.log(this.ident, 'map points', mapPoints, 'data', data);\n            console.log(this.ident, 'graph points', graphPoints);\n        }\n\n        var maxHour: number = 24;\n        graphPoints.forEach((_pointVal, pointKey) => {\n            if (maxHour < pointKey) {\n                maxHour = pointKey\n            }\n        });\n\n        let hoursCount = maxHour + 1\n        let X: number[] = new Array<number>(hoursCount).map(() => 0)\n        let Y: number[] = new Array<number>(hoursCount).map(() => 0)\n        let opacity: number[] = new Array<number>(hoursCount).map(() => 0)\n        for (var i = 0; i < hoursCount; i++) {\n            X[i] = i\n            Y[i] = 0\n            opacity[i] = 1\n        }\n\n        graphPoints.forEach((pointVal, pointKey) => {\n            if (!xValueFilter(pointKey)) {\n                opacity[pointKey] = 0.4\n            }\n            Y[pointKey] = pointVal\n        })\n\n        let barTrace = {\n            x: X,\n            y: Y,\n            type: 'bar',\n            marker: { opacity: opacity },\n            text: Y,\n        }\n\n\n        let normalizedData = dataTransformator.normalize(data, 20, 50)\n        let mapTrace = {\n            type: 'scattermapbox',\n            lon: lon,\n            lat: lat,\n            opacity: 0.6,\n            marker: { size: normalizedData },\n            text: data\n        }\n\n        return Object({\n            mapTrace,\n            barTrace,\n            allColumnNames\n        })\n    }\n\n    static toTraces(dataSet, dataColumnNames) {\n        if (this.debug) {\n            console.log(this.ident, 'whole dataSet', dataSet);\n            console.log(this.ident, 'data columns', dataColumnNames);\n        }\n\n        let series = new Map<string, Trace>();\n        let sortedSeries: Trace[] = [];\n        var allColumnNames = \"\";\n\n        if (dataSet.rows && dataSet.rows.length > 0) {\n            allColumnNames = dataSet.columns.map((r: { text: string; }) => r.text).join(' ')\n\n            let traceDataColumn = 2;\n            let xValueColumn = 1;\n            let yValueColumn = 3;\n\n            dataSet.columns.forEach((row, index) => {\n                if (row.text == dataColumnNames.xColumn) {\n                    xValueColumn = index\n                }\n                if (row.text == dataColumnNames.yColumn) {\n                    yValueColumn = index\n                }\n                if (row.text == dataColumnNames.dataColumn) {\n                    traceDataColumn = index\n                }\n            })\n\n            let sortedRows = dataSet.rows.sort((obj1: any[], obj2: any[]) => {\n                let obj1order: number = Number(obj1[xValueColumn])\n                let obj2order: number = Number(obj2[xValueColumn])\n\n                if (obj1order > obj2order) {\n                    return 1;\n                }\n\n                if (obj1order < obj2order) {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            sortedRows.forEach(dbRequestRow => {\n                let traceName = dbRequestRow[traceDataColumn];\n                let traceX: number = Number(dbRequestRow[xValueColumn]);\n                let traceY: number = Number(dbRequestRow[yValueColumn]);\n\n                if (dataColumnNames.xColumn == 'Time') {\n                    let xdate = new Date(dbRequestRow[xValueColumn])\n                    traceX = xdate.getHours()\n                }\n\n                let trace = series.get(traceName);\n                if (!trace) {\n                    trace = new Trace();\n                    trace.name = traceName;\n                    series.set(traceName, trace);\n                }\n\n                // to keep order\n                let prevTraceX: number = trace.x[trace.x.length - 1];\n                if (traceX <= prevTraceX) {\n                    traceX = prevTraceX + 1;\n                }\n\n                trace.x.push(traceX);\n                trace.y.push(traceY);\n            })\n\n            sortedSeries = Array.from(series.values()).sort((s1: Trace, s2: Trace) => {\n                return s1.name.localeCompare(s2.name, undefined, { numeric: true })\n            });\n        }\n\n        if (this.debug) {\n            console.log(this.ident, 'sorted series', sortedSeries);\n        }\n\n        return Object({\n            sortedSeries,\n            allColumnNames\n        })\n    }\n}","export class Trace{\n    public name: string = \"\";\n    public x : number[] = [];\n    public y: number[] = [];\n}"],"sourceRoot":""}