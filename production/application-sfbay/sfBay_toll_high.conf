# Note: this configuration will use paths relative to the project root (PWD) unless you override with these
# environment variables (use directories ending with slash):
# BEAM_SHARED_INPUTS=/path/to/beam-developers/model-inputs/
# BEAM_OUTPUTS=/path/to/your/preferred/output/destination/

##################################################################
# SIMULATION
##################################################################
beam.sharedInputs = ${PWD}"/production/application-sfbay"
beam.sharedInputs = ${?BEAM_SHARED_INPUTS}
beam.basePackage = "beam"
beam.agentsim.simulationName = "sfBay_toll_high"
beam.agentsim.numAgents = 413817
beam.agentsim.thresholdForWalkingInMeters = 100
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.modeChoiceParametersFile = ${beam.sharedInputs}"/modeChoiceParameters.xml"
# Ride Hailing Params
beam.agentsim.agents.rideHailing.numDriversAsFractionOfPopulation=0.005
beam.agentsim.agents.rideHailing.defaultCostPerMile=1.25
beam.agentsim.agents.rideHailing.defaultCostPerMinute=0.75
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.05
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 2.0
beam.agentsim.tuning.rideHailPrice = 1.0

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.skipOverBadActors = true

##################################################################
# Logging Filtering
##################################################################
// We break logging into two categories, BEAM and Dependencies, making it possible to enable detailed logging from BEAM
// while muting or filtering logging from libraries and dependencies
// This follows slf4j heirarchy: ALL < TRACE < DEBUG < INFO < WARN < ERROR < OFF
// Note that beam.logLevel overrides the akka logging level but is collapsed to akka heirarchy DEBUG < INFO < WARN < ERROR < OFF
beam.outputs.logging.beam.logLevel = "ERROR"
beam.outputs.logging.dependencies.logLevel = "ERROR"

##################################################################
# OUTPUTS
##################################################################
beam.outputs.outputDirectory = ${PWD}"/test/output"
beam.outputs.outputDirectory = ${?BEAM_OUTPUTS}
beam.outputs.eventsFileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writeEventsInterval = 1
beam.outputs.writePlansInterval = 0

# Exploding events will break all event writers up into individual files by event type
beam.outputs.explodeEventsIntoFiles = false

# Logging Levels:
# Any event types not explicitly listed take on defaultLoggingLevel
beam.outputs.defaultLoggingLevel = "OFF" # valid options:VERBOSE,REGULAR,SHORT,OFF
beam.outputs.overrideLoggingLevels = "beam.agentsim.events.ModeChoiceEvent:VERBOSE, beam.agentsim.events.PathTraversalEvent:VERBOSE"

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 5000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  routerClass = "beam.router.r5.R5RoutingWorker"
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2017-09-22T00:00:00-07:00"
  workerNumber = 500
  r5 {
    directory = ${beam.sharedInputs}"/r5"
    # Departure window in min
    departureWindow = 15
    osmFile = ${beam.sharedInputs}"/r5/sf-bay.osm.pbf"
    osmMapdbFile = ${beam.sharedInputs}"/r5/osm.mapdb"
  }

  # GTFS Downloader Params
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.outputDirectory}"/gtfs"
    apiKey = ${?GTFS_API_KEY}
    crs = "epsg:26910"
  }
}

##################################################################
# Akka
##################################################################
my-custom-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

akka {
  actor {
    serializers {
      #      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      #      java = "java.lang.String"
    }
    debug {
      # enable DEBUG logging of unhandled messages
      unhandled = on
    }
  }
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
  }
}

##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "epsg:26910"
  }
  network {
    inputNetworkFile = ${beam.sharedInputs}"/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.sharedInputs}"/population.xml.gz"
    inputPersonAttributesFile = ${beam.sharedInputs}"/populationAttributes.xml.gz"
  }
  households {
    inputFile = ${beam.sharedInputs}"/households.xml.gz"
    inputHouseholdAttributesFile = ${beam.sharedInputs}"/householdAttributes.xml.gz"
  }
  vehicles {
    vehiclesFile = ${beam.sharedInputs}"/vehicles.xml.gz"
  }
  strategy {
    maxAgentPlanMemorySize = 5

    ModuleProbability_1 = 0.7
    Module_1 = "BestScore"

    #    ModuleProbability_2 = 0.1
    #    Module_2 = "ReRoute"

    ModuleProbability_3 = 0.1
    Module_3 = "TimeAllocationMutator"

    #    ModuleProbability_4 = 0.1
    #    Module_4 = "ChangeTripMode"
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 1000000000
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads= 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    outputDirectory = ${beam.outputs.outputDirectory}"/pt-tutorial"
    firstIteration = 0
    lastIteration = 0
    eventsFileFormat = "xml"
    #Replacing w/ own mobsim soon...
    mobsim = "metasim"
    # Note: it is necessary for this to be set to overwrite for BEAM config to work properly. Don't worry, BEAM adds
    # a timestamp to every run to avoid collisions.
    overwriteFiles = "overwriteExistingFiles"
  }
  qsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime="00:00:00"
    endTime="30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    vehiclesFile = "transitVehicles.xml"
    transitModes = "pt"
  }
  changeMode {
    modes="car,pt"
  }
  planCalcScore {
    learningRate = "1.0"
    BrainExpBeta= "2.0"
    lateArrival= "-18"
    earlyDeparture = "-0"
    performing = "+6"
    traveling="-6"
    waiting="-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }
    ]
  }
}

