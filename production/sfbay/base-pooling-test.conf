# Note: this configuration will use paths relative to the project root (PWD) unless you override with these
# environment variables (use directories ending with slash):
# BEAM_OUTPUTS=/path/to/your/preferred/output/destination/

include "../common/akka.conf"
include "../common/metrics.conf"
include "../common/matsim.conf"


##################################################################
# Agentsim
##################################################################
beam.agentsim.simulationName = "pool"
beam.agentsim.numAgents = 413817
#beam.agentsim.numAgents = 10
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 80
beam.agentsim.schedulerParallelismWindow = 300
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "30:00:00"
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_transit_intercept = 3.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_pooled_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = 0.0
beam.agentsim.agents.modalBehaviors.lccm.filePath = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.plans {
  inputPlansFilePath = ${beam.inputDirectory}"/samples/population.xml.gz"
  inputPersonAttributesFilePath = ${beam.inputDirectory}"/samples/populationAttributes.xml.gz"
}
beam.agentsim.agents.households {
  inputFilePath = ${beam.inputDirectory}"/samples/households.xml.gz"
  inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/samples/householdAttributes.xml.gz"
}
#BeamVehicles Params
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/samples/fuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/samples/vehicleTypes.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ${beam.inputDirectory}"/samples/vehicles.csv.gz"
beam.agentsim.agents.vehicles.sharedFleets = []
#TAZ params
beam.agentsim.taz.filePath=${beam.inputDirectory}"/taz-centers.csv"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/parking/taz-parking.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.22080797450913886
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
# Population Adjustmnet
beam.agentsim.populationAdjustment="DEFAULT_ADJUSTMENT"
###########################
# Physsim
###########################
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/r5-no-local/physsim-network.xml"
beam.physsim.flowCapacityFactor = 0.2
beam.physsim.storageCapacityFactor = 1.5
beam.physsim.writeMATSimNetwork = false
beam.physsim.ptSampleSize = 0.03
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false

###########################
# Replanning
###########################
beam.replanning{
  maxAgentPlanMemorySize = 6
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.8
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.1
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.1
  Module_4 = "TimeMutator"
  ModuleProbability_4 = 0.0
}
##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = false
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart.path = "https://s3.us-east-2.amazonaws.com/beam-outputs/physsim-0.2-0.2_iter5_warmstart.zip"

##################################################################
# RideHail
##################################################################
# Initialization Type(PROCEDURAL | FILE)
beam.agentsim.agents.rideHail.initialization.initType = "PROCEDURAL"
# If PROCEDURAL, use these params
# initialLocation(HOME | UNIFORM_RANDOM | ALL_AT_CENTER | ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.name = "HOME"
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.home.radiusInMeters = 500
beam.agentsim.agents.rideHail.initialization.procedural.numDriversAsFractionOfPopulation=0.02
beam.agentsim.agents.rideHail.initialization.procedural.vehicleTypeId="Car"
# If FILE, use this param
beam.agentsim.agents.rideHail.defaultCostPerMile=1.25
beam.agentsim.agents.rideHail.defaultCostPerMinute=0.75
beam.agentsim.agents.rideHail.refuelThresholdInMeters=20000.0
beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=5000
beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600
beam.agentsim.agents.rideHail.refuelLocationType="AtTAZCenter"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.repositionTimeoutInSeconds = 0
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 60
beam.agentsim.agents.rideHail.allocationManager.randomRepositioning.repositioningShare=0.2
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.005
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true

##################################################################
# Metrics
##################################################################
beam.metrics.level = "off"

kamon {
  trace {
    level = simple-no-local-trace
  }

  metric {
    #tick-interval = 5 seconds
    filters {
      trace.includes = [ "**" ]

      akka-actor {
        includes = [ "beam-actor-system/user/router/**", "beam-actor-system/user/worker-*" ]
        excludes = [ "beam-actor-system/system/**", "beam-actor-system/user/worker-helper" ]
      }

      akka-dispatcher {
        includes = [ "beam-actor-system/akka.actor.default-dispatcher" ]
      }
    }
  }
  #statsd {
  #  hostname = 192.168.99.100
  #  port = 8125
  #}
  modules {
    #kamon-log-reporter.auto-start = yes
    #  kamon-statsd.auto-start = yes
  }
}


##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sfbay"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "xml,csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,ParkingEvent,LeavingParkingEvent,PersonCostEvent"
beam.outputs.stats.binSize = 3600

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 10
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.linkStatsWriteInterval = ${beam.outputs.defaultWriteInterval}
##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true

beam.debug.stuckAgentDetection {
  enabled = true
  checkIntervalMs = "1000ms"
  checkMaxNumberOfMessagesEnabled = true
  thresholds = [
    {
      triggerType = "beam.agentsim.agents.ridehail.RideHailManager$RideHailRepositioningTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        rideHailManager = 140
      }
    },
    {
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        population = 15
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        rideHailAgent = 70
        transitDriverAgent = 150
        population = 50
      }
    },
    {
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        population = 1
      }
    },
    {
      triggerType = "beam.agentsim.agents.InitializeTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        rideHailAgent = 1
        transitDriverAgent = 1
        population = 1
      }
    },
    {
      triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
      markAsStuckAfterMs = "110s"
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
    },
    {
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
      markAsStuckAfterMs = "100s"
      actorTypeToMaxNumberOfMessages {
        rideHailAgent = 70
        transitDriverAgent = 150
        population = 50
      }
    },
    {
      triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
      markAsStuckAfterMs = "60s"
      actorTypeToMaxNumberOfMessages {
        transitDriverAgent = 100
      }
    }
  ]
}

beam.logger.keepConsoleAppenderOn = false

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2017-09-22T00:00:00-07:00"
  transitOnStreetNetwork = true
  r5 {
    directory = ${beam.inputDirectory}"/r5-simple-no-local"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5-simple-no-local/sf-bay.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5-simple-no-local/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
  }
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "ModeChoiceObjectiveFunction_AbsoluteErrorWithMinLevelRepresentationOfMode"
beam.calibration.mode.benchmarkFilePath= ${beam.inputDirectory}"/calibration/benchmark.csv"
beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 1
  averageCountsOverIterations = 1
}


