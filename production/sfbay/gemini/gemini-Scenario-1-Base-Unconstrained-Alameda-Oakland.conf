include "gemini-base-2035.conf"
beam.agentsim.simulationName = "gemini-Scenario-1-Base-Unconstrained-Alameda-Oakland"


# There are 6 015 030 persons with plans
# 0.001 -> 6k
# 0.005 -> 30k
# 0.01  -> 60k
# 0.0117 -> 70k
# 0.02  -> 120k flowcap ->  0.04
# 0.04  -> 240k flowcap ->  0.05
# 0.1   -> 601k flowcap ~   0.12
# 0.15  -> 902k flowcap ~   0.16

# scaling variables
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0
beam.physsim.flowCapacityFactor = 1.0
beam.agentsim.taz.parkingStallCountScalingFactor = 1.0
####
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 15
beam.outputs.defaultWriteInterval = 3
beam.outputs.writePlansInterval = 3
beam.physsim.writePlansInterval = 3
beam.router.skim.writeAggregatedSkimsInterval = 3
beam.physsim.linkStatsWriteInterval = 3
beam.warmStart.prepareData = true

beam.agentsim.taz.parkingManager.method = "PARALLEL"
beam.agentsim.taz.parkingManager.parallel.numberOfClusters = 8

# There are 718543 persons with plans in activitysim-plans-base-2010-cut-718k-by-shapefile
beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "urbansim_v2"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/activitysim-plans-base-2010-cut-718k-by-shapefile"
  convertWgs2Utm = true
    modeMap = [
        "BIKE           -> bike",
        "DRIVEALONEFREE -> car",
        "DRIVEALONEPAY  -> car",
        "DRIVE_COM      -> drive_transit",
        "DRIVE_EXP      -> drive_transit",
        "DRIVE_HVY      -> drive_transit",
        "DRIVE_LOC      -> drive_transit",
        "DRIVE_LRF      -> drive_transit",
        "SHARED2FREE    -> car",
        "SHARED2PAY     -> car",
        "SHARED3FREE    -> car",
        "SHARED3PAY     -> car",
        "TAXI           -> ride_hail",
        "TNC_SHARED     -> ride_hail",
        "TNC_SINGLE     -> ride_hail",
        "WALK           -> walk",
        "WALK_COM       -> walk_transit",
        "WALK_EXP       -> walk_transit",
        "WALK_HVY       -> walk_transit",
        "WALK_LOC       -> walk_transit",
        "WALK_LRF       -> walk_transit",
    ]
}

#########
# Charging Behavior calibration
#
# how far go from current position to charging
# increase both home and work
# decrease home 2 and increase home 1 when negative, increase home 2 and decreae home 1 when positive
beam.agentsim.agents.parking.mulitnomialLogit.params.distanceMultiplier = 5
# increase if need less public charging
# with -30 increase home 1 and 2 and decrease others
# with 30 significantly decrease home 1, increase work and DCFC, decrease public
beam.agentsim.agents.parking.mulitnomialLogit.params.parkingPriceMultiplier = 0
# home charging vs others
beam.agentsim.agents.parking.mulitnomialLogit.params.homeActivityPrefersResidentialParkingMultiplier = 0
# increase if need more public charging
# effect if small for small runs with values [-30,30]
beam.agentsim.agents.parking.mulitnomialLogit.params.rangeAnxietyMultiplier = 35
#########

########
# Charging Infrastructure
beam.agentsim.agents.rideHail.initialization.parking.filePath = ${beam.inputDirectory}"/../parking/gemini_depot_unlimited_parking_power.csv"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/../parking/gemini_taz_unlimited_parking_plugs_power.csv"

#########
# using defaults because these values are overridden in gemini baseline
beam.agentsim.fractionOfPlansWithSingleActivity = 0.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.generate_secondary_activities = false
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.intercept_file_path = ""
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.activity_file_path = ""
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.additional_trip_utility = 0.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.max_destination_distance_meters = 32000
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.max_destination_choice_set_size = 20
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.destination_nest_scale_factor = 1.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.mode_nest_scale_factor = 1.0
beam.agentsim.agents.tripBehaviors.mulitnomialLogit.trip_nest_scale_factor = 1.0
########

########
# google api usage
beam.calibration.google.travelTimes {
    enable=false
    iterationInterval=5
    minDistanceInMeters=5000.0
    numDataPointsOver24Hours=100
    offPeakEnabled=false
    queryDate="2020-10-14"
    tolls=true
}
########


########
# input data from activity sim
beam.routing.carRouter="R5"
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/../r5-simple-no-local/physsim-network.xml"
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2017-09-22T00:00:00-07:00"
  transitOnStreetNetwork = true
  r5 {
    directory = ${beam.inputDirectory}"/../r5-simple-no-local"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/../r5-simple-no-local/sf-bay.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/../r5-simple-no-local/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
  }
}
########


#######
beam.agentsim.chargingNetworkManager {
  timeStepInSeconds = 300
  helics {
    connectionEnabled = false
    coreInitString = "--federates=1 --broker_address=tcp://127.0.0.1"
    coreType = "zmq"
    timeDeltaProperty = 1.0
    intLogLevel = 1
    federateName = "beamFederate"
    dataOutStreamPoint = "chargingLoad"
    dataInStreamPoint = "beam_to_pydss_federate/pubs_power_limit_and_lpm_control"
    bufferSize = 10000000
  }
}
########