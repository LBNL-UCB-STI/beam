include "../common/akka.conf"
include "../common/metrics.conf"

##################################################################
# SIMULATION
##################################################################
beam.agentsim.simulationName = "beamville"
beam.agentsim.numAgents = 100
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.thresholdForMakingParkingChoiceInMeters = 100
beam.agentsim.schedulerParallelismWindow = 30
beam.agentsim.timeBinSize = 3600
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom ModeChoiceLCCM
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = 2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = -1.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = -3.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = 0.0
beam.agentsim.agents.modalBehaviors.lccm.paramFile = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.modeSubsidy.file = ${beam.inputDirectory}"/subsidies.csv"
# Use bikes?
beam.agentsim.agents.vehicles.bicycles.useBikes=false
#BeamVehicles Params
beam.agentsim.agents.vehicles.beamFuelTypesFile = ${beam.inputDirectory}"/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.beamVehicleTypesFile = ${beam.inputDirectory}"/vehicleTypes.csv"
beam.agentsim.agents.vehicles.beamVehiclesFile = ${beam.inputDirectory}"/vehicles.csv"
# Population Adjustmnet (DEFAULT_ADJUSTMENT | PERCENTAGE_ADJUSTMENT)
beam.agentsim.populationAdjustment="DEFAULT_ADJUSTMENT"
#Toll params
beam.agentsim.toll.file=${beam.inputDirectory}"/toll-prices.csv"
#TAZ params
beam.agentsim.taz.file=${beam.inputDirectory}"/taz-centers.csv"
beam.agentsim.taz.parking = ${beam.inputDirectory}"/parking/taz-parking-default.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.1
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
# PhysSim Scaling Params
beam.physsim.flowCapacityFactor = 0.0001
beam.physsim.storageCapacityFactor = 0.0001
beam.physsim.writeMATSimNetwork = false
beam.physsim.ptSampleSize = 1.0
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false

##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = false
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart.pathType = "PARENT_RUN"
beam.warmStart.path = "https://s3.us-east-2.amazonaws.com/beam-outputs/run149-base__2018-06-27_20-28-26_2a2e2bd3.zip"

##################################################################
# RideHail
##################################################################
# Ride Hailing General Params
beam.agentsim.agents.rideHail.numDriversAsFractionOfPopulation=0.1
beam.agentsim.agents.rideHail.defaultCostPerMile=1.25
beam.agentsim.agents.rideHail.defaultCostPerMinute=0.75
beam.agentsim.agents.rideHail.vehicleTypeId="BEV"
beam.agentsim.agents.rideHail.refuelThresholdInMeters=5000.0
beam.agentsim.agents.rideHail.refuelLocationType="AtRequestLocation"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1

# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"

beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=5000

# initialLocation(HOME | UNIFORM_RANDOM | ALL_AT_CENTER | ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialLocation.name="HOME"
beam.agentsim.agents.rideHail.initialLocation.home.radiusInMeters=10000

# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | EV_MANAGER)
beam.agentsim.agents.rideHail.allocationManager.name="EV_MANAGER"
beam.agentsim.agents.rideHail.allocationManager.timeoutInSeconds=300
beam.agentsim.agents.rideHail.allocationManager.randomRepositioning.repositioningShare=0.2

beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositionCircleRadisInMeters=3000.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThreshholdForRepositioning=1
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=1.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true

beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600


beam.physsim.quick_fix_minCarSpeedInMetersPerSecond = 0.0
##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.debugActorTimerIntervalInSec = 60
beam.debug.actor.logDepth = 12

beam.debug.stuckAgentDetection {
  enabled = false
  thresholds = []
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "ModeChoiceObjectiveFunction"
beam.calibration.mode.benchmarkFileLoc = ${beam.inputDirectory}"/calibration/benchmark.csv"


##################################################################
# Non-common Metrics
##################################################################
beam.metrics.level = "off"
kamon {
  metric {
    filters {
      akka-actor {
        includes = [ "beam-actor-system/user/router/**", "beam-actor-system/user/worker-*" ]
        excludes = [ "beam-actor-system/system/**", "beam-actor-system/user/worker-helper" ]
      }
      akka-dispatcher {
        includes = [ "beam-actor-system/akka.actor.default-dispatcher" ]
      }
    }
  }
}

##################################################################
# OUTPUTS
##################################################################
# The outputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/beamville"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true


# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 1
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.linkStatsWriteInterval = ${beam.outputs.defaultWriteInterval}

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv,xml" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Exploding events will break all event writers up into individual files by event type
beam.outputs.events.explodeIntoFiles = false

# Events Writing Logging Levels:
# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelEvent,ParkEvent,LeavingParkingEvent,PersonCostEvent"
beam.outputs.stats.binSize = 3600

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:32631"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2016-10-17T00:00:00-07:00"
  transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5/beamville.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
    mNetBuilder.fromCRS = "EPSG:4326" # WGS84
    mNetBuilder.toCRS = "EPSG:26910"     # UTM10N
  }

  ##################################################################
  # GTFS Downloader Params
  ##################################################################
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.baseOutputDirectory}"/gtfs"
    apiKey = ${?GTFS_API_KEY}
    crs = "epsg:26910"
  }
}

##################################################################
# MATSim Conversion
##################################################################

matsim.conversion {
  scenarioDirectory = "test/intput/siouxfalls"
  populationFile = "Siouxfalls_population.xml"
  matsimNetworkFile = "Siouxfalls_network_PT.xml"
  generateVehicles = true
  vehiclesFile = "Siouxfalls_vehicles.xml"
  defaultHouseholdIncome {
    currency = "usd"
    period = "year"
    value = 50000
  }
  osmFile = "south-dakota-latest.osm.pbf"
  shapeConfig {
    shapeFile = "tz46_d00.shp"
    tazIdFieldName = "TZ46_D00_I"
  }
}

##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "Atlantis"
  }
  network {
    inputNetworkFile = ${beam.inputDirectory}"/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.inputDirectory}"/population.xml"
    inputPersonAttributesFile = ${beam.inputDirectory}"/populationAttributes.xml"
  }
  households {
    inputFile = ${beam.inputDirectory}"/households.xml"
    inputHouseholdAttributesFile = ${beam.inputDirectory}"/householdAttributes.xml"
  }

  counts {
    countsScaleFactor = 10.355
    averageCountsOverIterations = 0
    writeCountsInterval = ${beam.outputs.defaultWriteInterval}
    outputformat = "all"
  }
  strategy {
    maxAgentPlanMemorySize = 4

    ModuleProbability_1 = 0.7
    Module_1 = "SelectExpBeta"

    ModuleProbability_2 = 0.1
    Module_2 = "ClearRoutes"

    ModuleProbability_3 = 0.1
    Module_3 = "ClearModes"

    ModuleProbability_4 = 0.1
    Module_4 = "TimeMutator"

    #   ModuleProbability_3 = 0.3
    #   Module_3 = "SwitchModalityStyle"
    #   ModuleDisableAfterIteration_3 = 75

    //    ModuleProbability_4 = 0.2
    //    Module_4 = "UtilityBasedModeChoice"
    //    ModuleDisableAfterIteration_4 = 75

    # ModuleProbability_3 = 0.1
    # Module_3 = "TimeAllocationMutator"

    #    ModuleProbability_4 = 0.1
    #    Module_4 = "ChangeTripMode"
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 100
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads= 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    firstIteration = 0
    lastIteration = 10
    eventsFileFormat = "xml"
    overwriteFiles = "overwriteExistingFiles"
  }
  qsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime="00:00:00"
    endTime="30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    transitModes = "pt"
  }
  changeMode {
    modes="car,pt"
  }
  planCalcScore {
    writeExperiencedPlans = true
    learningRate = "1.0"
    BrainExpBeta= "2.0"
    lateArrival= "-18"
    earlyDeparture = "-0"
    performing = "6.0"
    traveling="-6.0"
    waiting="-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "modeParams"
        mode = "car"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "walk"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "bike"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "ride_hail"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "drive_transit"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "walk_transit"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }
    ]
  }
}


################################################
# DEPRECATED
###############################################
  beam.basePackage = "beam"
  #DrivingCostDefaults Params
  beam.agentsim.agents.drivingCost.defaultLitersPerMeter = 0.0001069
  beam.agentsim.agents.drivingCost.defaultPricePerGallon = 3.115
  beam.agentsim.agents.rideHail.vehicleRangeInMeters=20000.0
