include "beam.conf"

beam.agentsim.simulationName = "multiplerhm"

beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0

beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_subscription = 2

beam.debug.messageLogging = true
beam.debug.maxSimulationStepTimeBeforeConsideredStuckMin = 50
beam.outputs.events.fileOutputFormats = "csv.gz,xml" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

beam.physsim.skipPhysSim = true

beam.debug.stuckAgentDetection.enabled = false

beam.agentsim.agents.rideHail.bestResponseType = "MIN_UTILITY"

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    supportedModes="ride_hail"
    iterationStats.timeBinSizeInSec = 3600
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "HOME"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.fractionOfInitialVehicleFleet = 0.5
    initialization.procedural.vehicleTypeId = "beamVilleCar"
    defaultCostPerMile = 1.25
    defaultCostPerMinute = 0.75
    rideHailManager.radiusInMeters = 5000
    # allocationManager(DEFAULT_MANAGER | EV_MANAGER | POOLING_ALONSO_MORA)
    allocationManager.name = "DEFAULT_MANAGER"
    allocationManager.requestBufferTimeoutInSeconds = 0
    allocationManager.maxWaitingTimeInSec = 900
    allocationManager.maxExcessRideTime = 0.5 # up to +50%
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
    repositioningManager.name = "REPOSITIONING_LOW_WAITING_TIMES"
    repositioningManager.timeout = 300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 1.0
    allocationManager.repositionLowWaitingTimes.repositionCircleRadiusInMeters = 3000
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  },
  {
    name = "Lyft"
    supportedModes="ride_hail_pooled"
    iterationStats.timeBinSizeInSec = 3600
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "FILE"
    # If FILE, use this param
    initialization.filePath = ${beam.inputDirectory}"/rideHailFleet.csv"
    defaultBaseCost = 1.0
    defaultCostPerMile = 0.5
    defaultCostPerMinute = 0.14
    pooledBaseCost = 1.1
    pooledCostPerMile = 0.6
    pooledCostPerMinute = 0.01
    rideHailManager.radiusInMeters = 5000
    # allocationManager(DEFAULT_MANAGER | EV_MANAGER | POOLING_ALONSO_MORA)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.requestBufferTimeoutInSeconds = 200
    allocationManager.maxWaitingTimeInSec = 900
    allocationManager.maxExcessRideTime = 0.5 # up to +50%
    # ASYNC_GREEDY_VEHICLE_CENTRIC_MATCHING, ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT, ALONSO_MORA_MATCHING_WITH_MIP_ASSIGNMENT
    allocationManager.matchingAlgorithm = "ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT"
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
    repositioningManager.name = "DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 1
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 30
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 1.0
    allocationManager.repositionLowWaitingTimes.repositionCircleRadiusInMeters = 3000
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  },
  {
      name = "Cruise"
      iterationStats.timeBinSizeInSec = 3600
      # Initialization Type(PROCEDURAL | FILE)
      initialization.initType = "PROCEDURAL"
      # If PROCEDURAL, use these params
      # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
      initialization.procedural.initialLocation.name = "HOME"
      initialization.procedural.initialLocation.home.radiusInMeters = 500
      initialization.procedural.fractionOfInitialVehicleFleet = 0.5
      initialization.procedural.vehicleTypeId = "beamVilleCar"
      defaultBaseCost = 10.0
      defaultCostPerMile = 0.5
      defaultCostPerMinute = 0.14
      pooledBaseCost = 1.1
      pooledCostPerMile = 0.6
      pooledCostPerMinute = 0.01
      rideHailManager.radiusInMeters = 5000
      # allocationManager(DEFAULT_MANAGER | EV_MANAGER | POOLING_ALONSO_MORA)
      allocationManager.name = "POOLING_ALONSO_MORA"
      allocationManager.requestBufferTimeoutInSeconds = 200
      allocationManager.maxWaitingTimeInSec = 900
      allocationManager.maxExcessRideTime = 0.5 # up to +50%
      # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
      repositioningManager.name = "REPOSITIONING_LOW_WAITING_TIMES"
      repositioningManager.timeout = 300
      # REPOSITIONING_LOW_WAITING_TIMES
      allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 1.0
      allocationManager.repositionLowWaitingTimes.repositionCircleRadiusInMeters = 3000
      allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
      allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
      allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
      allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
      # repositioningMethod(TOP_SCORES | KMEANS)
      allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
      allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
      allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
      allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
      allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
      allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
      allocationManager.repositionLowWaitingTimes.produceDebugImages = true
    }
]

beam.outputs.events.eventsToWrite = "PersonDepartureEvent,PersonArrivalEvent,ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,TeleportationEvent,ChargingPlugInEvent,ChargingPlugOutEvent,ParkingEvent,LeavingParkingEvent,RideHailReservationConfirmationEvent"