include "../common/akka.conf"
include "../common/metrics.conf"
include "../common/matsim.conf"

include "beam.conf"

beam.agentsim.simulationName = "beamville-urbansimv2-emissions"
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0

beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.thresholdForMakingParkingChoiceInMeters = 100
beam.agentsim.schedulerParallelismWindow = 30
beam.agentsim.timeBinSize = 3600
beam.agentsim.endTime = "30:00:00"

beam.agentsim.agents.vehicles.linkToGradePercentFilePath = ${beam.inputDirectory}"/linkToGradePercent.csv"
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vehicleTypes-emissions.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ""
beam.agentsim.agents.vehicles.sharedFleets = []

beam.exchange.scenario {
  source = "urbansim_v2"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim_v2/5"
  convertWgs2Utm = true
  modeMap = [
    "ride_hail -> ride_hail"
    "walk -> walk"
    "ride_hail_pooled -> ride_hail_pooled"
    "bike -> bike"
    "car -> car"
    "cav -> cav"
    "walk_transit -> walk_transit"
  ]
}

#Toll params
beam.agentsim.toll.filePath = ${beam.inputDirectory}"/toll-prices.csv"
#TAZ params
beam.agentsim.taz.filePath = ${beam.inputDirectory}"/taz-centers.csv"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/parking/taz-parking-default.csv"

# Physsim
###########################
beam.physsim.inputNetworkFilePath = ${beam.routing.r5.directory}"/physsim-network.xml"
beam.physsim.flowCapacityFactor = 0.0001
beam.physsim.storageCapacityFactor = 1.0
beam.physsim.ptSampleSize = 1.0
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false
beam.physsim.jdeqsim.cacc.enabled = false
beam.physsim.jdeqsim.cacc.minRoadCapacity = 1999
beam.physsim.jdeqsim.cacc.minSpeedMetersPerSec = 7
beam.physsim.jdeqsim.cacc.speedAdjustmentFactor = 1.0

beam.router.skim = {
  keepKLatestSkims = 1
  writeSkimsInterval = 1
  writeAggregatedSkimsInterval = 1
}
###########################
# Replanning
###########################
beam.replanning {
  maxAgentPlanMemorySize = 4
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.7
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.1
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.1
  Module_4 = "TimeMutator"
  ModuleProbability_4 = 0.1
  fractionOfIterationsToDisableInnovation = 9999999
}
##################################################################
# Warm Mode
##################################################################

# Warmstart file path can be given in following format as well. s3://beam-outputs/run140-base__2018-06-26_22-20-49_28e81b6d.zip
beam.warmStart.type = "disabled"

##################################################################
# RideHail
##################################################################
# Ride Hail Transit Modes: Options are ALL, MASS, or the individual modes comma separate, e.g. BUS,TRAM
beam.agentsim.agents.rideHailTransit.modesToConsider = "MASS"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep = 0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel = 0.1
# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy = "KEEP_PRICE_LEVEL_FIXED_AT_ONE"

beam.agentsim.agents.rideHail.managers = [
  {
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "HOME"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.fractionOfInitialVehicleFleet = 0.2
    initialization.procedural.vehicleTypeId = "RH_Car"

    ## unrealistic values here in order to test IDLE time during shift and in between PathTraversal events
    initialization.procedural.averageOnDutyHoursPerDay = 16.2
    initialization.procedural.meanLogShiftDurationHours = 4.2
    initialization.procedural.stdLogShiftDurationHours = 1.2

    defaultCostPerMile = 1.25
    defaultCostPerMinute = 0.75
    rideHailManager.radiusInMeters = 5000
    # allocationManager(DEFAULT_MANAGER | EV_MANAGER | POOLING_ALONSO_MORA)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.requestBufferTimeoutInSeconds = 200
    allocationManager.maxWaitingTimeInSec = 900
    allocationManager.maxExcessRideTime = 0.5 # up to +50%
    # ASYNC_GREEDY_VEHICLE_CENTRIC_MATCHING, ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT, ALONSO_MORA_MATCHING_WITH_MIP_ASSIGNMENT
    allocationManager.matchingAlgorithm = "ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT"
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
    repositioningManager.name = "DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 1
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 30
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 1.0
    allocationManager.repositionLowWaitingTimes.repositionCircleRadiusInMeters = 3000
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  }
]
beam.physsim.minCarSpeedInMetersPerSecond = 0.0
##################################################################
# OUTPUTS
##################################################################
# The outputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = "output/beamville"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 1
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeAnalysis = false
beam.physsim.linkStatsWriteInterval = 0

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,AgencyRevenueEvent,ChargingPlugInEvent,ChargingPlugOutEvent,FleetStoredElectricityEvent,LeavingParkingEvent,ModeChoiceEvent,ParkingEvent,PathTraversalEvent,PersonArrivalEvent,PersonCostEvent,PersonDepartureEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,RefuelSessionEvent,ReplanningEvent,ReserveRideHailEvent,RideHailReservationConfirmationEvent,ShiftEvent,TeleportationEvent,VehicleEntersTrafficEvent,VehicleLeavesTrafficEvent"
beam.outputs.stats.binSize = 3600
##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.messageLogging = true
beam.debug.debugActorTimerIntervalInSec = 10
beam.debug.actor.logDepth = 12

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:32631"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 0
  averageCountsOverIterations = ${beam.outputs.defaultWriteInterval}
}

beam.exchange.output.emissions {
  # this is the list of emissions to filter out among
  # "CH4", "CO", "CO2", "HC", "NH3", "NOx", "PM", "PM10", "PM2_5", "ROG", "SOx", "TOG"
  pollutantsToFilterOut = []
  # this will embed emissions profiles in the following events: PathTraversalEvent, PersonEntersVehicleEvent, LeavingParkingEvent
  events = true
  # this will produce link level skims through emissions-skimmer
  skims = true
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2016-10-17T00:00:00-07:00"
  transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
  }
  startingIterationForTravelTimesMSA = 1
}

