include "sf-light.conf"

beam.agentsim.simulationName = "urbansim-hh5k"
beam.agentsim.lastIteration = 0
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0


beam.agentsim.taz.filePath=${beam.inputDirectory}"/shape/sf-light-modern-taz.shp"
beam.agentsim.taz.tazIdFieldName = "taz1454"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/parking/parking-modern-taz.csv.gz"

beam.physsim.flowCapacityFactor = 0.08
beam.physsim.skipPhysSim = true
beam.physsim.name = "PARBPRSim"
beam.outputs.defaultWriteInterval=1
beam.router.skim.writeSkimsInterval = 1

beam.agentsim.agents.rideHail.managers = [
  {
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "HOME"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.vehicleTypeId = "Car"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.1
    # If FILE, use this param
    initialization.filePath = ${beam.inputDirectory}"/rideHailFleet.csv"
    # Ride Hailing General Params
    defaultBaseCost = 1.8
    defaultCostPerMile = 0.91
    defaultCostPerMinute = 0.28
    pooledBaseCost = 1.89
    pooledCostPerMile = 1.11
    pooledCostPerMinute = 0.07
    rideHailManager.radiusInMeters = 10000
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.requestBufferTimeoutInSeconds = 200
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name = "DEFAULT_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 1
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 30
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 0.01
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  }
]

beam.exchange.scenario {
  source = "urbansim_v2"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim/hh5k"
  convertWgs2Utm = true
  modeMap = [
    "BIKE           -> bike",
    "DRIVEALONEFREE -> car",
    "DRIVEALONEPAY  -> car",
    "DRIVE_COM      -> drive_transit",
    "DRIVE_EXP      -> drive_transit",
    "DRIVE_HVY      -> drive_transit",
    "DRIVE_LOC      -> drive_transit",
    "DRIVE_LRF      -> drive_transit",
    "SHARED2FREE    -> hov2",
    "SHARED2PAY     -> hov2",
    "SHARED3FREE    -> hov3",
    "SHARED3PAY     -> hov3",
    "TAXI           -> ride_hail",
    "TNC_SHARED     -> ride_hail_pooled",
    "TNC_SINGLE     -> ride_hail",
    "WALK           -> walk",
    "WALK_COM       -> walk_transit",
    "WALK_EXP       -> walk_transit",
    "WALK_HVY       -> walk_transit",
    "WALK_LOC       -> walk_transit",
    "WALK_LRF       -> walk_transit",
  ]
}

beam.urbansim.fractionOfModesToClear {
  allModes = 0.0
  car = 0.0
  bike = 0.0
  walk = 0.0
  walk_transit = 0.0
  drive_transit = 0.0
}