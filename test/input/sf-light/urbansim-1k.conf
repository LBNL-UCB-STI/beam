include "../common/akka.conf"
include "../common/akka-router.conf"
include "../common/metrics.conf"
include "../common/matsim.conf"

# This version, base-sf-light.conf, is configured to use a subsample of the population located in:
#  ${beam.inputDirectory}"/sample"
##################################################################
# Agentsim
##################################################################
beam.agentsim.simulationName = "urbansim-1k"
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.timeBinSize = 3600
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "30:00:00"
beam.agentsim.schedulerParallelismWindow = 30
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = 2.5
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_pooled_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = 0.0
beam.agentsim.agents.modalBehaviors.lccm.filePath = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.modeIncentive.filePath = ${beam.inputDirectory}"/incentives.csv"
beam.agentsim.agents.ptFare.filePath = ${beam.inputDirectory}"/ptFares.csv"
beam.agentsim.agents.plans {
  inputPlansFilePath = ${beam.inputDirectory}"/sample/1k/population.xml.gz"
  inputPersonAttributesFilePath = ${beam.inputDirectory}"/sample/1k/populationAttributes.xml.gz"
}
beam.agentsim.agents.households {
  inputFilePath = ${beam.inputDirectory}"/sample/1k/households.xml.gz"
  inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/sample/1k/householdAttributes.xml.gz"
}
beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "UrbanSim"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim/1k/"
  convertWgs2Utm = true
}
#BeamVehicles Params
beam.agentsim.agents.population.useVehicleSampling = true
beam.agentsim.agents.vehicles.vehicleAdjustmentMethod = "INCOME_BASED"
beam.agentsim.agents.vehicles.linkToGradePercentFilePath = ${beam.inputDirectory}"/r5/linkToGradePercent.csv"
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vehicleTypes.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ${beam.inputDirectory}"/sample/1k/vehicles.csv.gz"
beam.agentsim.agents.vehicles.sharedFleets = []
#TAZ params
beam.agentsim.taz.filePath=${beam.inputDirectory}"/taz-centers.csv.gz"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/taz-parking.csv.gz"
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
#Toll params
beam.agentsim.toll.filePath=${beam.inputDirectory}"/toll-prices.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.5
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
###########################
# Physsim
###########################
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/r5/physsim-network.xml"
beam.physsim.flowCapacityFactor = 0.01
beam.physsim.storageCapacityFactor = 1.0
beam.physsim.writeEventsInterval = 0
beam.physsim.writePlansInterval = 0
beam.physsim.writeMATSimNetwork = false
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.linkStatsBinSize = 3600
beam.physsim.ptSampleSize = 0.03
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false

###########################
# Replanning
###########################
beam.replanning{
  maxAgentPlanMemorySize = 6
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.7
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.1
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.1
  Module_4 = "TimeMutator"
  ModuleProbability_4 = 0.0
}

##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = false
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart.path = "https://s3.us-east-2.amazonaws.com/beam-outputs/run149-base__2018-06-27_20-28-26_2a2e2bd3.zip"

##################################################################
# RideHail
##################################################################
# Initialization Type(PROCEDURAL | FILE)
beam.agentsim.agents.rideHail.initialization.initType = "PROCEDURAL"
# If PROCEDURAL, use these params
# initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.name = "HOME"
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.home.radiusInMeters = 500
beam.agentsim.agents.rideHail.initialization.procedural.vehicleTypeId="Car"
beam.agentsim.agents.rideHail.initialization.procedural.fractionOfInitialVehicleFleet=0.5
# If FILE, use this param
beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv"
# Ride Hailing General Params
beam.agentsim.agents.rideHail.refuelThresholdInMeters=20000.0
beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=10000
beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# allocationManager(DEFAULT_MANAGER | POOLING_ALONSO_MORA)
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 100
# repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.repositioningManager.name="DEFAULT_REPOSITIONING_MANAGER"
beam.agentsim.agents.rideHail.repositioningManager.timeout=600
# DEMAND_FOLLOWING_REPOSITIONING_MANAGER
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=1
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=30
# REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.pickupTimeWindowInSec=600
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.dropoffTimeWindowInSec=0.2
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.maxRequestsPerVehicle=5
# when range below refuelRequiredThresholdInMeters, EV Ride Hail CAVs will charge
# when range above noRefuelThresholdInMeters, EV Ride Hail CAVs will not charge
# (between these params probability of charging is linear interpolation from 0% to 100%)
beam.agentsim.agents.rideHail.cav.refuelRequiredThresholdInMeters = 16000.0 # 10 miles
beam.agentsim.agents.rideHail.cav.noRefuelThresholdInMeters = 160000.0 # 60 miles

##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sf-light"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writePlansInterval = 1
beam.outputs.writeEventsInterval = 1
beam.outputs.writeLinkTraversalInterval = 0
beam.outputs.writeSkimsInterval = 1
beam.outputs.writeAnalysis = false

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,ChargingPlugInEvent,ChargingPlugOutEvent,ParkEvent,LeavingParkingEvent"
beam.outputs.stats.binSize = 3600

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.actor.logDepth = 20
beam.debug.debugActorTimerIntervalInSec = 30

beam.debug.stuckAgentDetection {
  checkIntervalMs = 200
  checkMaxNumberOfMessagesEnabled = false
  defaultTimeoutMs = 60000
  enabled = false
  overallSimulationTimeoutMs = 100000
  thresholds = [
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
        rideHailAgent = 1
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.InitializeTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 11
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
    }
  ]
}



##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  transitOnStreetNetwork = true
  baseDate = "2017-09-22T00:00:00-07:00"
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5/sf-light.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
  }
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "CountsObjectiveFunction"
beam.calibration.mode.benchmarkFilePath=${beam.inputDirectory}"/sf-light-calibration/benchmark.csv"
beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 1
  averageCountsOverIterations = 1
  inputCountsFile = ${beam.inputDirectory}"/counts/fall_2015_wed_filtered.xml"
}

