include "sf-light-25k.conf"

beam.agentsim.simulationName = "sf-light-25k-multiple-rhm"

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "HOME"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.vehicleTypeId = "Car"
    initialization.procedural.numDriversAsFractionOfPopulation = 0.05
    # Ride Hailing General Params
    defaultBaseCost = 1.8
    defaultCostPerMile = 0.91
    defaultCostPerMinute = 0.28
    pooledBaseCost = 1.89
    pooledCostPerMile = 1.11
    pooledCostPerMinute = 0.07
    rideHailManager.radiusInMeters = 10000
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name = "DEFAULT_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 1
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 30
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 0.01
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  },
  {
    name = "Lyft"
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "FILE"
    # If FILE, use this param
    initialization.filePath = ${beam.inputDirectory}"/rideHailFleet.csv"
    # Ride Hailing General Params
    defaultBaseCost = 2.2
    defaultCostPerMile = 1.51
    defaultCostPerMinute = 1.38
    pooledBaseCost = 2.12
    pooledCostPerMile = 1.91
    pooledCostPerMinute = 0.13
    refuelThresholdInMeters = 20000.0
    rideHailManager.radiusInMeters = 10000
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name = "DEFAULT_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 1
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 30
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 0.01
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  }
]