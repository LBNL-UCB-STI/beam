include "sf-light.conf"

beam.agentsim.simulationName = "sflight-11-emissions-urbansim_v2"
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0

beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 1

//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transfer = 0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.car_intercept = 0.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.walk_transit_intercept = 5.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.drive_transit_intercept = 0.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_transit_intercept = 5.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_intercept = -10.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_pooled_intercept = 2.5
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.walk_intercept = 0.0
//beam.agentsim.agents.modalBehaviors.multinomialLogit.params.bike_intercept = 0.0

beam.debug.vmInformation.createGCClassHistogram = true
beam.debug.vmInformation.writeHeapDump = true

beam.warmStart.type = "disabled"

beam.exchange.scenario {
  source = "urbansim_v2"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim_v2/11"
  convertWgs2Utm = true
  modeMap = [
    "ride_hail -> ride_hail"
    "car -> car"
    "bike -> bike"
    "walk -> walk"
    "walk_transit -> walk_transit"
    "ride_hail_pooled -> ride_hail_pooled"  ]
}

beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vehicleTypes-emissions.csv"

//beam.agentsim.agents.freight {
//  enabled = true
//  plansFilePath = ${beam.inputDirectory}"/freight/payload-plans.csv"
//  toursFilePath = ${beam.inputDirectory}"/freight/freight-tours.csv"
//  carriersFilePath = ${beam.inputDirectory}"/freight/freight-carriers.csv"
//  carrierParkingFilePath = ${beam.inputDirectory}"/freight/freight-depots.csv.gz"
//  reader = "Generic"
//  replanning {
//    disableAfterIteration = 1
//    departureTime = 28800
//    strategy = "singleTour"
//  }
//}

beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,AgencyRevenueEvent,ChargingPlugInEvent,ChargingPlugOutEvent,FleetStoredElectricityEvent,LeavingParkingEvent,ModeChoiceEvent,ParkingEvent,PathTraversalEvent,PersonArrivalEvent,PersonCostEvent,PersonDepartureEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,RefuelSessionEvent,ReplanningEvent,ReserveRideHailEvent,RideHailReservationConfirmationEvent,ShiftEvent,TeleportationEvent,VehicleEntersTrafficEvent,VehicleLeavesTrafficEvent"

beam.router.skim = {
  keepKLatestSkims = 1
  writeSkimsInterval = 1
  writeAggregatedSkimsInterval = 1
}

beam.warmStart.type = "disabled"

beam.physsim.flowCapacityFactor = 0.001
beam.physsim.skipPhysSim = false

beam.exchange.output.emissions {
  # this is the list of emissions to filter out among
  # "CH4", "CO", "CO2", "HC", "NH3", "NOx", "PM", "PM10", "PM2_5", "ROG", "SOx", "TOG"
  pollutantsToFilterOut = []
  # this will embed emissions profiles in the following events: PathTraversalEvent, PersonEntersVehicleEvent, LeavingParkingEvent
  events = true
  # this will produce link level skims through emissions-skimmer
  skims = true
}

