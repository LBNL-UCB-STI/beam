# This version, base-sf-light.conf, is configured to use a subsample of the population located in:
#  ${beam.inputDirectory}"/sample"
##################################################################
# SIMULATION
##################################################################
beam.basePackage = "beam"
beam.agentsim.simulationName = "sf-light-2.5k"
beam.agentsim.numAgents = 2500
beam.agentsim.thresholdForWalkingInMeters = 100
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom ModeChoiceLCCM
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceLCCM"
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.cost = -1.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.time = -0.0047
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hailing_intercept = -2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = 0.0
beam.agentsim.agents.modalBehaviors.lccm.paramFile = ${beam.inputDirectory}"/lccm-long.csv"
#TAZ params
beam.agentsim.taz.file=${beam.inputDirectory}"/taz-centers.csv.gz"
# Ride Hailing Params
beam.agentsim.agents.rideHailing.numDriversAsFractionOfPopulation=0.1
beam.agentsim.agents.rideHailing.defaultCostPerMile=1.25
beam.agentsim.agents.rideHailing.defaultCostPerMinute=0.75
# SurgePricing parameters
beam.agentsim.agents.rideHailing.surgePricing.timeBinSize=3600
beam.agentsim.agents.rideHailing.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHailing.surgePricing.minimumSurgeLevel=0.1
beam.agentsim.agents.rideHailing.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.2
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
# PhysSim Scaling Params
beam.physsim.flowCapacityFactor = 0.003
beam.physsim.storageCapacityFactor = 0.004
beam.physsim.writeEventsInterval = 10
beam.physsim.writePlansInterval = 10
beam.physsim.writeMATSimNetwork = false
beam.physsim.linkstatsWriteInterval = 10
beam.physsim.linkstatsBinSize = 3600
beam.physsim.ptSampleSize = 0.003

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.skipOverBadActors = true
beam.debug.secondsToWaitForSkip = 15

##################################################################
# Metrics
##################################################################
beam.metrics.level = "off"

kamon {
  trace {
    level = simple-trace
  }

  metric {
    #tick-interval = 5 seconds
    filters {
      trace.includes = [ "**" ]

      akka-actor {
        includes = [ "beam-actor-system/user/router/**", "beam-actor-system/user/worker-*" ]
        excludes = [ "beam-actor-system/system/**", "beam-actor-system/user/worker-helper" ]
      }

      akka-dispatcher {
        includes = [ "beam-actor-system/akka.actor.default-dispatcher" ]
      }
    }
  }

  statsd {
    hostname = 127.0.0.1
    port = 8125
  }

  influxdb {
    hostname = 18.216.21.254
    port = 8089
    protocol = "udp"
  }

  modules {
    #kamon-log-reporter.auto-start = yes
    #kamon-statsd.auto-start = yes
    #kamon-influxdb.auto-start = yes
  }
}

##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sf-light"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writePlansInterval = 1
beam.outputs.writeEventsInterval = 1

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Exploding events will break all event writers up into individual files by event type
beam.outputs.events.explodeIntoFiles = false

# Events Writing Logging Levels:
# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
beam.outputs.events.defaultWritingLevel = "OFF" # valid options:VERBOSE,REGULAR,SHORT,OFF
#beam.outputs.events.overrideWritingLevels = "beam.agentsim.events.ModeChoiceEvent:VERBOSE, beam.agentsim.events.PathTraversalEvent:VERBOSE"
beam.outputs.events.overrideWritingLevels = "org.matsim.api.core.v01.events.ActivityEndEvent:REGULAR, org.matsim.api.core.v01.events.ActivityStartEvent:REGULAR, org.matsim.api.core.v01.events.PersonEntersVehicleEvent:REGULAR, org.matsim.api.core.v01.events.PersonLeavesVehicleEvent:REGULAR, beam.agentsim.events.ModeChoiceEvent:VERBOSE, beam.agentsim.events.PathTraversalEvent:VERBOSE"

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 5000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  routerClass = "beam.router.r5.R5RoutingWorker"
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2017-09-22T00:00:00-07:00"
  transitOnStreetNetwork = true # PathTraversalEvents for transit vehicles
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5/sf-light.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
  }

  # GTFS Downloader Params
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.baseOutputDirectory}"/gtfs"
    apiKey = ${?GTFS_API_KEY}
    crs = "epsg:26910"
  }
}

##################################################################
# Akka
##################################################################
my-custom-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

router-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 1.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  actor {
    serializers {
      #      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      #      java = "java.lang.String"
    }
    debug {
      # enable DEBUG logging of unhandled messages
      unhandled = on
    }
  }
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
  }
  deployment {
    /router/router-worker {
      dispatcher = router-dispatcher
    }
  }
}

##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "epsg:26910"
  }
  network {
    inputNetworkFile = ${beam.inputDirectory}"/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.inputDirectory}"/sample/2.5k/population.xml.gz"
    inputPersonAttributesFile = ${beam.inputDirectory}"/sample/2.5k/populationAttributes.xml.gz"
  }
  households {
    inputFile = ${beam.inputDirectory}"/sample/2.5k/households.xml.gz"
    inputHouseholdAttributesFile = ${beam.inputDirectory}"/sample/2.5k/householdAttributes.xml.gz"
  }
  vehicles {
    vehiclesFile = ${beam.inputDirectory}"/sample/2.5k/vehicles.xml.gz"
  }
  strategy {
    maxAgentPlanMemorySize = 6
    planSelectorForRemoval = "tryToKeepOneOfEachClass"

    ModuleProbability_1 = 0.3
    Module_1 = "SelectExpBeta"

    ModuleProbability_2 = 0.7
    Module_2 = "GrabExperiencedPlan"

    ModuleProbability_3 = 0.3
    Module_3 = "ClearRoutes"

    ModuleProbability_4 = 1.3
    Module_4 = "SwitchModalityStyle"
    ModuleDisableAfterIteration_4 = 15
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 10000
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads= 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    firstIteration = 0
    lastIteration = 30
    eventsFileFormat = "xml"
    overwriteFiles = "overwriteExistingFiles"
  }
  qsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime="00:00:00"
    endTime="30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    vehiclesFile = ${beam.inputDirectory}/"transitVehicles.xml"
    transitModes = "pt"
  }
  changeMode {
    modes="car,pt"
  }
  planCalcScore {
    learningRate = "1.0"
    BrainExpBeta= "2.0"
    lateArrival= "-18"
    earlyDeparture = "-0"
    performing = "+6"
    traveling="-6"
    waiting="-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "modeParams"
        mode = "car"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "walk"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "bike"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "ride_hailing"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "drive_transit"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }, {
        type = "modeParams"
        mode = "walk_transit"
        constant = 0.0
        marginalUtilityOfDistance_util_m = 0.0
        marginalUtilityOfTraveling_util_hr = -6.0
        monetaryDistanceRate = 0.0
      }
    ]
  }
}

