include "../common/akka.conf"
include "../common/akka-router.conf"
include "../common/metrics.conf"
include "../common/matsim.conf"

# This version, base-sf-light.conf, is configured to use a subsample of the population located in:
#  ${beam.inputDirectory}"/sample"
##################################################################
# SIMULATION
##################################################################
beam.agentsim.simulationName = "sf-light-2.5k"
beam.agentsim.numAgents = 1000
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 5
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.timeBinSize = 3600
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "30:00:00"
beam.agentsim.schedulerParallelismWindow = 30
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.car_intercept = 0.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_transit_intercept = 2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.drive_transit_intercept = 1.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_transit_intercept = 2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.ride_hail_intercept = 1.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.walk_intercept = -2.0
beam.agentsim.agents.modalBehaviors.mulitnomialLogit.params.bike_intercept = 0.0
beam.agentsim.agents.modalBehaviors.lccm.paramFile = ${beam.inputDirectory}"/lccm-long.csv"
beam.agentsim.agents.modeIncentive.file = ${beam.inputDirectory}"/incentives.csv"
beam.agentsim.agents.ptFare.file = ${beam.inputDirectory}"/ptFares.csv"
# Use bikes?
beam.agentsim.agents.vehicles.bicycles.useBikes=false
#BeamVehicles Params
beam.agentsim.agents.vehicles.beamFuelTypesFile = ${beam.inputDirectory}"/beamFuelTypes.csv"
beam.agentsim.agents.vehicles.beamVehicleTypesFile = ${beam.inputDirectory}"/sample/2.5k/vehicleTypes.csv"
beam.agentsim.agents.vehicles.beamVehiclesFile = ${beam.inputDirectory}"/sample/2.5k/vehicles.csv.gz"
#TAZ params
beam.agentsim.taz.file=${beam.inputDirectory}"/taz-centers.csv.gz"
beam.agentsim.taz.parking = ${beam.inputDirectory}"/taz-parking.csv.gz"
# Ride Hailing Params
beam.agentsim.agents.rideHail.numDriversAsFractionOfPopulation=0.05
beam.agentsim.agents.rideHail.defaultCostPerMile=1.25
beam.agentsim.agents.rideHail.defaultCostPerMinute=0.75
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
#Toll params
beam.agentsim.toll.file=${beam.inputDirectory}"/toll-prices.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.5
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
# PhysSim Scaling Params
beam.physsim.flowCapacityFactor = 0.01
beam.physsim.storageCapacityFactor = 0.01
beam.physsim.writeEventsInterval = 0
beam.physsim.writePlansInterval = 0
beam.physsim.writeMATSimNetwork = false
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.linkStatsBinSize = 3600
beam.physsim.ptSampleSize = 0.03
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false

###########################
# Replanning
###########################
beam.modules {
  strategy {
    maxAgentPlanMemorySize = 6
    #planSelectorForRemoval = "tryToKeepOneOfEachClass"
    ModuleProbability_1 = 0.3
    Module_1 = "SelectExpBeta"
    ModuleProbability_2 = 0.1
    Module_2 = "ClearRoutes"
    ModuleProbability_3 = 0.2
    Module_3 = "ClearModes"
    #    ModuleProbability_3 = 0.5
    #    Module_3 = "SwitchModalityStyle"
    #    ModuleDisableAfterIteration_3 = 20}
  }
  global {
    randomSeed = 4711
    coordinateSystem = "epsg:26910"
  }
  network {
    inputNetworkFile = ${beam.inputDirectory}"/r5/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.inputDirectory}"/sample/2.5k/population.xml.gz"
    inputPersonAttributesFile = ${beam.inputDirectory}"/sample/2.5k/populationAttributes.xml.gz"
  }
  households {
    inputFile = ${beam.inputDirectory}"/sample/2.5k/households.xml.gz"
    inputHouseholdAttributesFile = ${beam.inputDirectory}"/sample/2.5k/householdAttributes.xml.gz"
  }
  counts {
    countsScaleFactor = 10.355
    averageCountsOverIterations = 5
    writeCountsInterval = 5
  }
  parallelEventHandling {
    estimatedNumberOfEvents = 10000
  }
}

##################################################################
# Warm Mode
##################################################################
beam.warmStart.enabled = false
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart.path = "https://s3.us-east-2.amazonaws.com/beam-outputs/run149-base__2018-06-27_20-28-26_2a2e2bd3.zip"
##################################################################
# RideHail
##################################################################
# Ride Hailing General Params
beam.agentsim.agents.rideHail.numDriversAsFractionOfPopulation=0.1
beam.agentsim.agents.rideHail.defaultCostPerMile=1.25
beam.agentsim.agents.rideHail.defaultCostPerMinute=0.75
beam.agentsim.agents.rideHail.vehicleTypeId="BEV150"
beam.agentsim.agents.rideHail.refuelThresholdInMeters=20000.0
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1

# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"

beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=10000

# initialLocation(HOME | UNIFORM_RANDOM | ALL_AT_CENTER | ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialLocation.name="HOME"
beam.agentsim.agents.rideHail.initialLocation.home.radiusInMeters=1000

# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES )
beam.agentsim.agents.rideHail.allocationManager.name="REPOSITIONING_LOW_WAITING_TIMES"
beam.agentsim.agents.rideHail.allocationManager.randomRepositioning.repositioningShare=0.2

beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true

beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = true
beam.debug.actor.logDepth = 0

beam.debug.stuckAgentDetection {
  enabled = false
  thresholds = []
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "CountsObjectiveFunction"
beam.calibration.mode.benchmarkFileLoc=${beam.inputDirectory}"/sf-light-calibration/benchmark.csv"


##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sf-light"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writePlansInterval = 1
beam.outputs.writeEventsInterval = 1
beam.outputs.writeLinkTraversalInterval = 0

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv,xml" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
# Any event types not explicitly listed in overrideWritingLevels take on defaultWritingLevel
beam.outputs.events.eventsToWrite = "ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,RefuelEvent"
beam.outputs.stats.binSize = 3600

##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  transitOnStreetNetwork = true
  baseDate = "2017-09-22T00:00:00-07:00"
  r5 {
    directory = ${beam.inputDirectory}"/r5"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/r5/sf-light.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5/osm.mapdb"
    mNetBuilder.fromCRS = "EPSG:4326" # WGS84
    mNetBuilder.toCRS = "EPSG:26910"     # UTM10N
  }

  # GTFS Downloader Params
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.baseOutputDirectory}"/gtfs"
    crs = "epsg:26910"
  }
}

##################################################################
# Non-common Akka
##################################################################
akka.log-dead-letters = 1