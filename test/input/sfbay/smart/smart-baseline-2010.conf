# beam.sim.Note: this configuration will use paths relative to the project root (PWD) unless you override with these
# environment variables (use directories ending with slash):
# BEAM_OUTPUTS=/path/to/your/preferred/output/destination/

include "../../common/akka.conf"
include "../../common/metrics.conf"
include "../../common/matsim.conf"

include "smart-baseline.conf"
include "smart-pilates.conf"
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.3
beam.physsim.flowCapacityFactor = 0.33
beam.outputs.defaultWriteInterval = 1
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 1

beam.agentsim.endTime = "30:00:00"

# make it to be better parking algorithm
beam.agentsim.agents.parking.fractionOfSameTypeZones = 0.5
beam.agentsim.agents.parking.minNumberOfSameTypeZones = 10
##################################################################
# Agentsim
##################################################################
beam.agentsim.simulationName = "sfbay-smart-base-2010"

# parking better
beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.thresholdForMakingParkingChoiceInMeters = 100

# fraction of vehicle
beam.agentsim.agents.vehicles.fractionOfInitialVehicleFleet = 3.0

# solving spliting problem
beam.routing.r5.linkRadiusMeters = 33300.0

#clear_mode
beam.urbansim.fractionOfModesToClear.allModes = 1.0

#turning off enroute
beam.agentsim.agents.vehicles.enroute.remainingDistanceWrtBatteryCapacityThreshold = 0

#reducing parking search radius
beam.agentsim.agents.parking.minSearchRadius = 100
beam.agentsim.agents.parking.maxSearchRadius = 800

# adding more ridehails
beam.agentsim.agents.rideHail.initialization.procedural.fractionOfInitialVehicleFleet = 1.0

beam.agentsim.tuning.transitCapacity = 1


# don't skipPhysSim
beam.physsim.skipPhysSim = false


beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "urbansim_v2"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/../gemini/activitysim-plans-base-2010"
  convertWgs2Utm = true
    modeMap = [
        "BIKE           -> bike",
        "DRIVEALONEFREE -> car",
        "DRIVEALONEPAY  -> car",
        "DRIVE_COM      -> drive_transit",
        "DRIVE_EXP      -> drive_transit",
        "DRIVE_HVY      -> drive_transit",
        "DRIVE_LOC      -> drive_transit",
        "DRIVE_LRF      -> drive_transit",
        "SHARED2FREE    -> car",
        "SHARED2PAY     -> car",
        "SHARED3FREE    -> car",
        "SHARED3PAY     -> car",
        "TAXI           -> ride_hail",
        "TNC_SHARED     -> ride_hail",
        "TNC_SINGLE     -> ride_hail",
        "WALK           -> walk",
        "WALK_COM       -> walk_transit",
        "WALK_EXP       -> walk_transit",
        "WALK_HVY       -> walk_transit",
        "WALK_LOC       -> walk_transit",
        "WALK_LRF       -> walk_transit",
    ]
}


# including shared fleets

beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vehicle-tech/vehicletypes-baseline-different-price.csv"
beam.agentsim.agents.vehicles.fractionOfPeopleWithBicycle=0.12

beam.agentsim.agents.vehicles.sharedFleets = [
  {
    name = "bay_wheels"
    managerType = "fixed-non-reserving-fleet-by-taz"

    parkingFilePath = ${beam.inputDirectory}"/../parking/shared-bike-parking-hubs-199-real.csv"
    #@optional
    fixed-non-reserving-fleet-by-taz {
      vehicleTypeId = "sharedVehicle-sharedBike",
      vehiclesSharePerTAZFromCSV = ${beam.inputDirectory}"/../parking/shared-bike-initial-199-real.csv",
      maxWalkingDistance = 500,
#      //https://mtc.ca.gov/operations/traveler-services/bay-wheels-bike-share-program
      fleetSize = 84

    }
  }
]
